/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Deskriptor;
import org.openapitools.client.model.Fundstelle;
import org.openapitools.client.model.Vorgangspositionbezug;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert Metadaten zu einer Aktivität.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Aktivitaet {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_AKTIVITAETSART = "aktivitaetsart";
  @SerializedName(SERIALIZED_NAME_AKTIVITAETSART)
  @javax.annotation.Nonnull
  private String aktivitaetsart;

  /**
   * Gets or Sets typ
   */
  @JsonAdapter(TypEnum.Adapter.class)
  public enum TypEnum {
    AKTIVIT_T("Aktivität");

    private String value;

    TypEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypEnum fromValue(String value) {
      for (TypEnum b : TypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  @javax.annotation.Nonnull
  private TypEnum typ;

  /**
   * Gets or Sets dokumentart
   */
  @JsonAdapter(DokumentartEnum.Adapter.class)
  public enum DokumentartEnum {
    DRUCKSACHE("Drucksache"),
    
    PLENARPROTOKOLL("Plenarprotokoll");

    private String value;

    DokumentartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DokumentartEnum fromValue(String value) {
      for (DokumentartEnum b : DokumentartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DokumentartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DokumentartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DokumentartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DokumentartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DokumentartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOKUMENTART = "dokumentart";
  @SerializedName(SERIALIZED_NAME_DOKUMENTART)
  @javax.annotation.Nonnull
  private DokumentartEnum dokumentart;

  public static final String SERIALIZED_NAME_WAHLPERIODE = "wahlperiode";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE)
  @javax.annotation.Nonnull
  private Integer wahlperiode;

  public static final String SERIALIZED_NAME_DATUM = "datum";
  @SerializedName(SERIALIZED_NAME_DATUM)
  @javax.annotation.Nonnull
  private LocalDate datum;

  public static final String SERIALIZED_NAME_AKTUALISIERT = "aktualisiert";
  @SerializedName(SERIALIZED_NAME_AKTUALISIERT)
  @javax.annotation.Nonnull
  private OffsetDateTime aktualisiert;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_FUNDSTELLE = "fundstelle";
  @SerializedName(SERIALIZED_NAME_FUNDSTELLE)
  @javax.annotation.Nonnull
  private Fundstelle fundstelle;

  public static final String SERIALIZED_NAME_VORGANGSBEZUG = "vorgangsbezug";
  @SerializedName(SERIALIZED_NAME_VORGANGSBEZUG)
  @javax.annotation.Nullable
  private List<Vorgangspositionbezug> vorgangsbezug = new ArrayList<>();

  public static final String SERIALIZED_NAME_VORGANGSBEZUG_ANZAHL = "vorgangsbezug_anzahl";
  @SerializedName(SERIALIZED_NAME_VORGANGSBEZUG_ANZAHL)
  @javax.annotation.Nonnull
  private Integer vorgangsbezugAnzahl;

  public static final String SERIALIZED_NAME_DESKRIPTOR = "deskriptor";
  @SerializedName(SERIALIZED_NAME_DESKRIPTOR)
  @javax.annotation.Nullable
  private List<Deskriptor> deskriptor = new ArrayList<>();

  public static final String SERIALIZED_NAME_ABSTRACT = "abstract";
  @SerializedName(SERIALIZED_NAME_ABSTRACT)
  @javax.annotation.Nullable
  private String _abstract;

  public Aktivitaet() {
  }

  public Aktivitaet id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Aktivitaet aktivitaetsart(@javax.annotation.Nonnull String aktivitaetsart) {
    this.aktivitaetsart = aktivitaetsart;
    return this;
  }

  /**
   * Get aktivitaetsart
   * @return aktivitaetsart
   */
  @javax.annotation.Nonnull
  public String getAktivitaetsart() {
    return aktivitaetsart;
  }

  public void setAktivitaetsart(@javax.annotation.Nonnull String aktivitaetsart) {
    this.aktivitaetsart = aktivitaetsart;
  }


  public Aktivitaet typ(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nonnull
  public TypEnum getTyp() {
    return typ;
  }

  public void setTyp(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
  }


  public Aktivitaet dokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
    return this;
  }

  /**
   * Get dokumentart
   * @return dokumentart
   */
  @javax.annotation.Nonnull
  public DokumentartEnum getDokumentart() {
    return dokumentart;
  }

  public void setDokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
  }


  public Aktivitaet wahlperiode(@javax.annotation.Nonnull Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
    return this;
  }

  /**
   * Get wahlperiode
   * @return wahlperiode
   */
  @javax.annotation.Nonnull
  public Integer getWahlperiode() {
    return wahlperiode;
  }

  public void setWahlperiode(@javax.annotation.Nonnull Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
  }


  public Aktivitaet datum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
    return this;
  }

  /**
   * Get datum
   * @return datum
   */
  @javax.annotation.Nonnull
  public LocalDate getDatum() {
    return datum;
  }

  public void setDatum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
  }


  public Aktivitaet aktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
    return this;
  }

  /**
   * Letzte Aktualisierung der Entität oder des zugehörigen Dokuments
   * @return aktualisiert
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAktualisiert() {
    return aktualisiert;
  }

  public void setAktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
  }


  public Aktivitaet titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public Aktivitaet fundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
    return this;
  }

  /**
   * Get fundstelle
   * @return fundstelle
   */
  @javax.annotation.Nonnull
  public Fundstelle getFundstelle() {
    return fundstelle;
  }

  public void setFundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
  }


  public Aktivitaet vorgangsbezug(@javax.annotation.Nullable List<Vorgangspositionbezug> vorgangsbezug) {
    this.vorgangsbezug = vorgangsbezug;
    return this;
  }

  public Aktivitaet addVorgangsbezugItem(Vorgangspositionbezug vorgangsbezugItem) {
    if (this.vorgangsbezug == null) {
      this.vorgangsbezug = new ArrayList<>();
    }
    this.vorgangsbezug.add(vorgangsbezugItem);
    return this;
  }

  /**
   * Zusammenfassung der ersten 4 zugehörigen Vorgänge
   * @return vorgangsbezug
   */
  @javax.annotation.Nullable
  public List<Vorgangspositionbezug> getVorgangsbezug() {
    return vorgangsbezug;
  }

  public void setVorgangsbezug(@javax.annotation.Nullable List<Vorgangspositionbezug> vorgangsbezug) {
    this.vorgangsbezug = vorgangsbezug;
  }


  public Aktivitaet vorgangsbezugAnzahl(@javax.annotation.Nonnull Integer vorgangsbezugAnzahl) {
    this.vorgangsbezugAnzahl = vorgangsbezugAnzahl;
    return this;
  }

  /**
   * Gesamtzahl der zugehörigen Vorgänge
   * @return vorgangsbezugAnzahl
   */
  @javax.annotation.Nonnull
  public Integer getVorgangsbezugAnzahl() {
    return vorgangsbezugAnzahl;
  }

  public void setVorgangsbezugAnzahl(@javax.annotation.Nonnull Integer vorgangsbezugAnzahl) {
    this.vorgangsbezugAnzahl = vorgangsbezugAnzahl;
  }


  public Aktivitaet deskriptor(@javax.annotation.Nullable List<Deskriptor> deskriptor) {
    this.deskriptor = deskriptor;
    return this;
  }

  public Aktivitaet addDeskriptorItem(Deskriptor deskriptorItem) {
    if (this.deskriptor == null) {
      this.deskriptor = new ArrayList<>();
    }
    this.deskriptor.add(deskriptorItem);
    return this;
  }

  /**
   * Get deskriptor
   * @return deskriptor
   */
  @javax.annotation.Nullable
  public List<Deskriptor> getDeskriptor() {
    return deskriptor;
  }

  public void setDeskriptor(@javax.annotation.Nullable List<Deskriptor> deskriptor) {
    this.deskriptor = deskriptor;
  }


  public Aktivitaet _abstract(@javax.annotation.Nullable String _abstract) {
    this._abstract = _abstract;
    return this;
  }

  /**
   * Get _abstract
   * @return _abstract
   */
  @javax.annotation.Nullable
  public String getAbstract() {
    return _abstract;
  }

  public void setAbstract(@javax.annotation.Nullable String _abstract) {
    this._abstract = _abstract;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Aktivitaet aktivitaet = (Aktivitaet) o;
    return Objects.equals(this.id, aktivitaet.id) &&
        Objects.equals(this.aktivitaetsart, aktivitaet.aktivitaetsart) &&
        Objects.equals(this.typ, aktivitaet.typ) &&
        Objects.equals(this.dokumentart, aktivitaet.dokumentart) &&
        Objects.equals(this.wahlperiode, aktivitaet.wahlperiode) &&
        Objects.equals(this.datum, aktivitaet.datum) &&
        Objects.equals(this.aktualisiert, aktivitaet.aktualisiert) &&
        Objects.equals(this.titel, aktivitaet.titel) &&
        Objects.equals(this.fundstelle, aktivitaet.fundstelle) &&
        Objects.equals(this.vorgangsbezug, aktivitaet.vorgangsbezug) &&
        Objects.equals(this.vorgangsbezugAnzahl, aktivitaet.vorgangsbezugAnzahl) &&
        Objects.equals(this.deskriptor, aktivitaet.deskriptor) &&
        Objects.equals(this._abstract, aktivitaet._abstract);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, aktivitaetsart, typ, dokumentart, wahlperiode, datum, aktualisiert, titel, fundstelle, vorgangsbezug, vorgangsbezugAnzahl, deskriptor, _abstract);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Aktivitaet {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    aktivitaetsart: ").append(toIndentedString(aktivitaetsart)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    dokumentart: ").append(toIndentedString(dokumentart)).append("\n");
    sb.append("    wahlperiode: ").append(toIndentedString(wahlperiode)).append("\n");
    sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
    sb.append("    aktualisiert: ").append(toIndentedString(aktualisiert)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    fundstelle: ").append(toIndentedString(fundstelle)).append("\n");
    sb.append("    vorgangsbezug: ").append(toIndentedString(vorgangsbezug)).append("\n");
    sb.append("    vorgangsbezugAnzahl: ").append(toIndentedString(vorgangsbezugAnzahl)).append("\n");
    sb.append("    deskriptor: ").append(toIndentedString(deskriptor)).append("\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("aktivitaetsart");
    openapiFields.add("typ");
    openapiFields.add("dokumentart");
    openapiFields.add("wahlperiode");
    openapiFields.add("datum");
    openapiFields.add("aktualisiert");
    openapiFields.add("titel");
    openapiFields.add("fundstelle");
    openapiFields.add("vorgangsbezug");
    openapiFields.add("vorgangsbezug_anzahl");
    openapiFields.add("deskriptor");
    openapiFields.add("abstract");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("aktivitaetsart");
    openapiRequiredFields.add("typ");
    openapiRequiredFields.add("dokumentart");
    openapiRequiredFields.add("wahlperiode");
    openapiRequiredFields.add("datum");
    openapiRequiredFields.add("aktualisiert");
    openapiRequiredFields.add("titel");
    openapiRequiredFields.add("fundstelle");
    openapiRequiredFields.add("vorgangsbezug_anzahl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Aktivitaet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Aktivitaet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Aktivitaet is not found in the empty JSON string", Aktivitaet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Aktivitaet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Aktivitaet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Aktivitaet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("aktivitaetsart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aktivitaetsart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aktivitaetsart").toString()));
      }
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      // validate the required field `typ`
      TypEnum.validateJsonElement(jsonObj.get("typ"));
      if (!jsonObj.get("dokumentart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentart").toString()));
      }
      // validate the required field `dokumentart`
      DokumentartEnum.validateJsonElement(jsonObj.get("dokumentart"));
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      // validate the required field `fundstelle`
      Fundstelle.validateJsonElement(jsonObj.get("fundstelle"));
      if (jsonObj.get("vorgangsbezug") != null && !jsonObj.get("vorgangsbezug").isJsonNull()) {
        JsonArray jsonArrayvorgangsbezug = jsonObj.getAsJsonArray("vorgangsbezug");
        if (jsonArrayvorgangsbezug != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vorgangsbezug").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vorgangsbezug` to be an array in the JSON string but got `%s`", jsonObj.get("vorgangsbezug").toString()));
          }

          // validate the optional field `vorgangsbezug` (array)
          for (int i = 0; i < jsonArrayvorgangsbezug.size(); i++) {
            Vorgangspositionbezug.validateJsonElement(jsonArrayvorgangsbezug.get(i));
          };
        }
      }
      if (jsonObj.get("deskriptor") != null && !jsonObj.get("deskriptor").isJsonNull()) {
        JsonArray jsonArraydeskriptor = jsonObj.getAsJsonArray("deskriptor");
        if (jsonArraydeskriptor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deskriptor").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deskriptor` to be an array in the JSON string but got `%s`", jsonObj.get("deskriptor").toString()));
          }

          // validate the optional field `deskriptor` (array)
          for (int i = 0; i < jsonArraydeskriptor.size(); i++) {
            Deskriptor.validateJsonElement(jsonArraydeskriptor.get(i));
          };
        }
      }
      if ((jsonObj.get("abstract") != null && !jsonObj.get("abstract").isJsonNull()) && !jsonObj.get("abstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstract").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Aktivitaet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Aktivitaet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Aktivitaet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Aktivitaet.class));

       return (TypeAdapter<T>) new TypeAdapter<Aktivitaet>() {
           @Override
           public void write(JsonWriter out, Aktivitaet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Aktivitaet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Aktivitaet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Aktivitaet
   * @throws IOException if the JSON string is invalid with respect to Aktivitaet
   */
  public static Aktivitaet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Aktivitaet.class);
  }

  /**
   * Convert an instance of Aktivitaet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

