/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert den körperschaftlichen Urheber einer Bundestags- oder Bundesratsdrucksache, z. B. einen Ausschuss, eine Fraktion, die Bundesregierung, ein Bundesland oder dergleichen.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Urheber {
  public static final String SERIALIZED_NAME_EINBRINGER = "einbringer";
  @SerializedName(SERIALIZED_NAME_EINBRINGER)
  @javax.annotation.Nullable
  private Boolean einbringer;

  public static final String SERIALIZED_NAME_BEZEICHNUNG = "bezeichnung";
  @SerializedName(SERIALIZED_NAME_BEZEICHNUNG)
  @javax.annotation.Nonnull
  private String bezeichnung;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  /**
   * Gets or Sets rolle
   */
  @JsonAdapter(RolleEnum.Adapter.class)
  public enum RolleEnum {
    B("B"),
    
    U("U");

    private String value;

    RolleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolleEnum fromValue(String value) {
      for (RolleEnum b : RolleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLLE = "rolle";
  @SerializedName(SERIALIZED_NAME_ROLLE)
  @javax.annotation.Nullable
  private RolleEnum rolle;

  public Urheber() {
  }

  public Urheber einbringer(@javax.annotation.Nullable Boolean einbringer) {
    this.einbringer = einbringer;
    return this;
  }

  /**
   * Get einbringer
   * @return einbringer
   */
  @javax.annotation.Nullable
  public Boolean getEinbringer() {
    return einbringer;
  }

  public void setEinbringer(@javax.annotation.Nullable Boolean einbringer) {
    this.einbringer = einbringer;
  }


  public Urheber bezeichnung(@javax.annotation.Nonnull String bezeichnung) {
    this.bezeichnung = bezeichnung;
    return this;
  }

  /**
   * Get bezeichnung
   * @return bezeichnung
   */
  @javax.annotation.Nonnull
  public String getBezeichnung() {
    return bezeichnung;
  }

  public void setBezeichnung(@javax.annotation.Nonnull String bezeichnung) {
    this.bezeichnung = bezeichnung;
  }


  public Urheber titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public Urheber rolle(@javax.annotation.Nullable RolleEnum rolle) {
    this.rolle = rolle;
    return this;
  }

  /**
   * Get rolle
   * @return rolle
   */
  @javax.annotation.Nullable
  public RolleEnum getRolle() {
    return rolle;
  }

  public void setRolle(@javax.annotation.Nullable RolleEnum rolle) {
    this.rolle = rolle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Urheber urheber = (Urheber) o;
    return Objects.equals(this.einbringer, urheber.einbringer) &&
        Objects.equals(this.bezeichnung, urheber.bezeichnung) &&
        Objects.equals(this.titel, urheber.titel) &&
        Objects.equals(this.rolle, urheber.rolle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(einbringer, bezeichnung, titel, rolle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Urheber {\n");
    sb.append("    einbringer: ").append(toIndentedString(einbringer)).append("\n");
    sb.append("    bezeichnung: ").append(toIndentedString(bezeichnung)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    rolle: ").append(toIndentedString(rolle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("einbringer");
    openapiFields.add("bezeichnung");
    openapiFields.add("titel");
    openapiFields.add("rolle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bezeichnung");
    openapiRequiredFields.add("titel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Urheber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Urheber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Urheber is not found in the empty JSON string", Urheber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Urheber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Urheber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Urheber.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bezeichnung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bezeichnung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bezeichnung").toString()));
      }
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if ((jsonObj.get("rolle") != null && !jsonObj.get("rolle").isJsonNull()) && !jsonObj.get("rolle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolle").toString()));
      }
      // validate the optional field `rolle`
      if (jsonObj.get("rolle") != null && !jsonObj.get("rolle").isJsonNull()) {
        RolleEnum.validateJsonElement(jsonObj.get("rolle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Urheber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Urheber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Urheber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Urheber.class));

       return (TypeAdapter<T>) new TypeAdapter<Urheber>() {
           @Override
           public void write(JsonWriter out, Urheber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Urheber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Urheber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Urheber
   * @throws IOException if the JSON string is invalid with respect to Urheber
   */
  public static Urheber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Urheber.class);
  }

  /**
   * Convert an instance of Urheber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

