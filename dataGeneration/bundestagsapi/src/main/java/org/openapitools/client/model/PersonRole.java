/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Bundesland;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert den Eintrag einer Person in einer bestimmten Rolle oder Funktion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class PersonRole {
  public static final String SERIALIZED_NAME_FUNKTION = "funktion";
  @SerializedName(SERIALIZED_NAME_FUNKTION)
  @javax.annotation.Nonnull
  private String funktion;

  public static final String SERIALIZED_NAME_FUNKTIONSZUSATZ = "funktionszusatz";
  @SerializedName(SERIALIZED_NAME_FUNKTIONSZUSATZ)
  @javax.annotation.Nullable
  private String funktionszusatz;

  public static final String SERIALIZED_NAME_FRAKTION = "fraktion";
  @SerializedName(SERIALIZED_NAME_FRAKTION)
  @javax.annotation.Nullable
  private String fraktion;

  public static final String SERIALIZED_NAME_NACHNAME = "nachname";
  @SerializedName(SERIALIZED_NAME_NACHNAME)
  @javax.annotation.Nonnull
  private String nachname;

  public static final String SERIALIZED_NAME_VORNAME = "vorname";
  @SerializedName(SERIALIZED_NAME_VORNAME)
  @javax.annotation.Nonnull
  private String vorname;

  public static final String SERIALIZED_NAME_NAMENSZUSATZ = "namenszusatz";
  @SerializedName(SERIALIZED_NAME_NAMENSZUSATZ)
  @javax.annotation.Nullable
  private String namenszusatz;

  public static final String SERIALIZED_NAME_WAHLPERIODE_NUMMER = "wahlperiode_nummer";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE_NUMMER)
  @javax.annotation.Nullable
  private List<Integer> wahlperiodeNummer = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAHLKREISZUSATZ = "wahlkreiszusatz";
  @SerializedName(SERIALIZED_NAME_WAHLKREISZUSATZ)
  @javax.annotation.Nullable
  private String wahlkreiszusatz;

  public static final String SERIALIZED_NAME_RESSORT_TITEL = "ressort_titel";
  @SerializedName(SERIALIZED_NAME_RESSORT_TITEL)
  @javax.annotation.Nullable
  private String ressortTitel;

  public static final String SERIALIZED_NAME_BUNDESLAND = "bundesland";
  @SerializedName(SERIALIZED_NAME_BUNDESLAND)
  @javax.annotation.Nullable
  private Bundesland bundesland;

  public PersonRole() {
  }

  public PersonRole funktion(@javax.annotation.Nonnull String funktion) {
    this.funktion = funktion;
    return this;
  }

  /**
   * Get funktion
   * @return funktion
   */
  @javax.annotation.Nonnull
  public String getFunktion() {
    return funktion;
  }

  public void setFunktion(@javax.annotation.Nonnull String funktion) {
    this.funktion = funktion;
  }


  public PersonRole funktionszusatz(@javax.annotation.Nullable String funktionszusatz) {
    this.funktionszusatz = funktionszusatz;
    return this;
  }

  /**
   * Get funktionszusatz
   * @return funktionszusatz
   */
  @javax.annotation.Nullable
  public String getFunktionszusatz() {
    return funktionszusatz;
  }

  public void setFunktionszusatz(@javax.annotation.Nullable String funktionszusatz) {
    this.funktionszusatz = funktionszusatz;
  }


  public PersonRole fraktion(@javax.annotation.Nullable String fraktion) {
    this.fraktion = fraktion;
    return this;
  }

  /**
   * Get fraktion
   * @return fraktion
   */
  @javax.annotation.Nullable
  public String getFraktion() {
    return fraktion;
  }

  public void setFraktion(@javax.annotation.Nullable String fraktion) {
    this.fraktion = fraktion;
  }


  public PersonRole nachname(@javax.annotation.Nonnull String nachname) {
    this.nachname = nachname;
    return this;
  }

  /**
   * Get nachname
   * @return nachname
   */
  @javax.annotation.Nonnull
  public String getNachname() {
    return nachname;
  }

  public void setNachname(@javax.annotation.Nonnull String nachname) {
    this.nachname = nachname;
  }


  public PersonRole vorname(@javax.annotation.Nonnull String vorname) {
    this.vorname = vorname;
    return this;
  }

  /**
   * Get vorname
   * @return vorname
   */
  @javax.annotation.Nonnull
  public String getVorname() {
    return vorname;
  }

  public void setVorname(@javax.annotation.Nonnull String vorname) {
    this.vorname = vorname;
  }


  public PersonRole namenszusatz(@javax.annotation.Nullable String namenszusatz) {
    this.namenszusatz = namenszusatz;
    return this;
  }

  /**
   * Get namenszusatz
   * @return namenszusatz
   */
  @javax.annotation.Nullable
  public String getNamenszusatz() {
    return namenszusatz;
  }

  public void setNamenszusatz(@javax.annotation.Nullable String namenszusatz) {
    this.namenszusatz = namenszusatz;
  }


  public PersonRole wahlperiodeNummer(@javax.annotation.Nullable List<Integer> wahlperiodeNummer) {
    this.wahlperiodeNummer = wahlperiodeNummer;
    return this;
  }

  public PersonRole addWahlperiodeNummerItem(Integer wahlperiodeNummerItem) {
    if (this.wahlperiodeNummer == null) {
      this.wahlperiodeNummer = new ArrayList<>();
    }
    this.wahlperiodeNummer.add(wahlperiodeNummerItem);
    return this;
  }

  /**
   * Wahlperioden, für die der Personeneintrag zutrifft
   * @return wahlperiodeNummer
   */
  @javax.annotation.Nullable
  public List<Integer> getWahlperiodeNummer() {
    return wahlperiodeNummer;
  }

  public void setWahlperiodeNummer(@javax.annotation.Nullable List<Integer> wahlperiodeNummer) {
    this.wahlperiodeNummer = wahlperiodeNummer;
  }


  public PersonRole wahlkreiszusatz(@javax.annotation.Nullable String wahlkreiszusatz) {
    this.wahlkreiszusatz = wahlkreiszusatz;
    return this;
  }

  /**
   * Get wahlkreiszusatz
   * @return wahlkreiszusatz
   */
  @javax.annotation.Nullable
  public String getWahlkreiszusatz() {
    return wahlkreiszusatz;
  }

  public void setWahlkreiszusatz(@javax.annotation.Nullable String wahlkreiszusatz) {
    this.wahlkreiszusatz = wahlkreiszusatz;
  }


  public PersonRole ressortTitel(@javax.annotation.Nullable String ressortTitel) {
    this.ressortTitel = ressortTitel;
    return this;
  }

  /**
   * Get ressortTitel
   * @return ressortTitel
   */
  @javax.annotation.Nullable
  public String getRessortTitel() {
    return ressortTitel;
  }

  public void setRessortTitel(@javax.annotation.Nullable String ressortTitel) {
    this.ressortTitel = ressortTitel;
  }


  public PersonRole bundesland(@javax.annotation.Nullable Bundesland bundesland) {
    this.bundesland = bundesland;
    return this;
  }

  /**
   * Get bundesland
   * @return bundesland
   */
  @javax.annotation.Nullable
  public Bundesland getBundesland() {
    return bundesland;
  }

  public void setBundesland(@javax.annotation.Nullable Bundesland bundesland) {
    this.bundesland = bundesland;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonRole personRole = (PersonRole) o;
    return Objects.equals(this.funktion, personRole.funktion) &&
        Objects.equals(this.funktionszusatz, personRole.funktionszusatz) &&
        Objects.equals(this.fraktion, personRole.fraktion) &&
        Objects.equals(this.nachname, personRole.nachname) &&
        Objects.equals(this.vorname, personRole.vorname) &&
        Objects.equals(this.namenszusatz, personRole.namenszusatz) &&
        Objects.equals(this.wahlperiodeNummer, personRole.wahlperiodeNummer) &&
        Objects.equals(this.wahlkreiszusatz, personRole.wahlkreiszusatz) &&
        Objects.equals(this.ressortTitel, personRole.ressortTitel) &&
        Objects.equals(this.bundesland, personRole.bundesland);
  }

  @Override
  public int hashCode() {
    return Objects.hash(funktion, funktionszusatz, fraktion, nachname, vorname, namenszusatz, wahlperiodeNummer, wahlkreiszusatz, ressortTitel, bundesland);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonRole {\n");
    sb.append("    funktion: ").append(toIndentedString(funktion)).append("\n");
    sb.append("    funktionszusatz: ").append(toIndentedString(funktionszusatz)).append("\n");
    sb.append("    fraktion: ").append(toIndentedString(fraktion)).append("\n");
    sb.append("    nachname: ").append(toIndentedString(nachname)).append("\n");
    sb.append("    vorname: ").append(toIndentedString(vorname)).append("\n");
    sb.append("    namenszusatz: ").append(toIndentedString(namenszusatz)).append("\n");
    sb.append("    wahlperiodeNummer: ").append(toIndentedString(wahlperiodeNummer)).append("\n");
    sb.append("    wahlkreiszusatz: ").append(toIndentedString(wahlkreiszusatz)).append("\n");
    sb.append("    ressortTitel: ").append(toIndentedString(ressortTitel)).append("\n");
    sb.append("    bundesland: ").append(toIndentedString(bundesland)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("funktion");
    openapiFields.add("funktionszusatz");
    openapiFields.add("fraktion");
    openapiFields.add("nachname");
    openapiFields.add("vorname");
    openapiFields.add("namenszusatz");
    openapiFields.add("wahlperiode_nummer");
    openapiFields.add("wahlkreiszusatz");
    openapiFields.add("ressort_titel");
    openapiFields.add("bundesland");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("funktion");
    openapiRequiredFields.add("nachname");
    openapiRequiredFields.add("vorname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonRole
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonRole.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonRole is not found in the empty JSON string", PersonRole.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonRole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonRole` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PersonRole.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("funktion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funktion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funktion").toString()));
      }
      if ((jsonObj.get("funktionszusatz") != null && !jsonObj.get("funktionszusatz").isJsonNull()) && !jsonObj.get("funktionszusatz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funktionszusatz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funktionszusatz").toString()));
      }
      if ((jsonObj.get("fraktion") != null && !jsonObj.get("fraktion").isJsonNull()) && !jsonObj.get("fraktion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraktion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fraktion").toString()));
      }
      if (!jsonObj.get("nachname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nachname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nachname").toString()));
      }
      if (!jsonObj.get("vorname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorname").toString()));
      }
      if ((jsonObj.get("namenszusatz") != null && !jsonObj.get("namenszusatz").isJsonNull()) && !jsonObj.get("namenszusatz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namenszusatz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namenszusatz").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wahlperiode_nummer") != null && !jsonObj.get("wahlperiode_nummer").isJsonNull() && !jsonObj.get("wahlperiode_nummer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wahlperiode_nummer` to be an array in the JSON string but got `%s`", jsonObj.get("wahlperiode_nummer").toString()));
      }
      if ((jsonObj.get("wahlkreiszusatz") != null && !jsonObj.get("wahlkreiszusatz").isJsonNull()) && !jsonObj.get("wahlkreiszusatz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wahlkreiszusatz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wahlkreiszusatz").toString()));
      }
      if ((jsonObj.get("ressort_titel") != null && !jsonObj.get("ressort_titel").isJsonNull()) && !jsonObj.get("ressort_titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ressort_titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ressort_titel").toString()));
      }
      // validate the optional field `bundesland`
      if (jsonObj.get("bundesland") != null && !jsonObj.get("bundesland").isJsonNull()) {
        Bundesland.validateJsonElement(jsonObj.get("bundesland"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonRole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonRole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonRole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonRole.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonRole>() {
           @Override
           public void write(JsonWriter out, PersonRole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonRole read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonRole given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonRole
   * @throws IOException if the JSON string is invalid with respect to PersonRole
   */
  public static PersonRole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonRole.class);
  }

  /**
   * Convert an instance of PersonRole to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

