/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems f√ºr Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DrucksacheAutorenAnzeigeInner;
import org.openapitools.client.model.Fundstelle;
import org.openapitools.client.model.Ressort;
import org.openapitools.client.model.Urheber;
import org.openapitools.client.model.Vorgangsbezug;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DrucksacheText
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class DrucksacheText {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  /**
   * Gets or Sets typ
   */
  @JsonAdapter(TypEnum.Adapter.class)
  public enum TypEnum {
    DOKUMENT("Dokument");

    private String value;

    TypEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypEnum fromValue(String value) {
      for (TypEnum b : TypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  @javax.annotation.Nonnull
  private TypEnum typ;

  /**
   * Gets or Sets dokumentart
   */
  @JsonAdapter(DokumentartEnum.Adapter.class)
  public enum DokumentartEnum {
    DRUCKSACHE("Drucksache");

    private String value;

    DokumentartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DokumentartEnum fromValue(String value) {
      for (DokumentartEnum b : DokumentartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DokumentartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DokumentartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DokumentartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DokumentartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DokumentartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOKUMENTART = "dokumentart";
  @SerializedName(SERIALIZED_NAME_DOKUMENTART)
  @javax.annotation.Nonnull
  private DokumentartEnum dokumentart;

  public static final String SERIALIZED_NAME_DRUCKSACHETYP = "drucksachetyp";
  @SerializedName(SERIALIZED_NAME_DRUCKSACHETYP)
  @javax.annotation.Nonnull
  private String drucksachetyp;

  public static final String SERIALIZED_NAME_DOKUMENTNUMMER = "dokumentnummer";
  @SerializedName(SERIALIZED_NAME_DOKUMENTNUMMER)
  @javax.annotation.Nonnull
  private String dokumentnummer;

  public static final String SERIALIZED_NAME_WAHLPERIODE = "wahlperiode";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE)
  @javax.annotation.Nullable
  private Integer wahlperiode;

  /**
   * Gets or Sets herausgeber
   */
  @JsonAdapter(HerausgeberEnum.Adapter.class)
  public enum HerausgeberEnum {
    BT("BT"),
    
    BR("BR");

    private String value;

    HerausgeberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HerausgeberEnum fromValue(String value) {
      for (HerausgeberEnum b : HerausgeberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HerausgeberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HerausgeberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HerausgeberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HerausgeberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HerausgeberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HERAUSGEBER = "herausgeber";
  @SerializedName(SERIALIZED_NAME_HERAUSGEBER)
  @javax.annotation.Nonnull
  private HerausgeberEnum herausgeber;

  public static final String SERIALIZED_NAME_DATUM = "datum";
  @SerializedName(SERIALIZED_NAME_DATUM)
  @javax.annotation.Nonnull
  private LocalDate datum;

  public static final String SERIALIZED_NAME_AKTUALISIERT = "aktualisiert";
  @SerializedName(SERIALIZED_NAME_AKTUALISIERT)
  @javax.annotation.Nonnull
  private OffsetDateTime aktualisiert;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_AUTOREN_ANZEIGE = "autoren_anzeige";
  @SerializedName(SERIALIZED_NAME_AUTOREN_ANZEIGE)
  @javax.annotation.Nullable
  private List<DrucksacheAutorenAnzeigeInner> autorenAnzeige = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTOREN_ANZAHL = "autoren_anzahl";
  @SerializedName(SERIALIZED_NAME_AUTOREN_ANZAHL)
  @javax.annotation.Nonnull
  private Integer autorenAnzahl;

  public static final String SERIALIZED_NAME_FUNDSTELLE = "fundstelle";
  @SerializedName(SERIALIZED_NAME_FUNDSTELLE)
  @javax.annotation.Nonnull
  private Fundstelle fundstelle;

  public static final String SERIALIZED_NAME_PDF_HASH = "pdf_hash";
  @SerializedName(SERIALIZED_NAME_PDF_HASH)
  @javax.annotation.Nullable
  private String pdfHash;

  public static final String SERIALIZED_NAME_URHEBER = "urheber";
  @SerializedName(SERIALIZED_NAME_URHEBER)
  @javax.annotation.Nullable
  private List<Urheber> urheber = new ArrayList<>();

  public static final String SERIALIZED_NAME_VORGANGSBEZUG = "vorgangsbezug";
  @SerializedName(SERIALIZED_NAME_VORGANGSBEZUG)
  @javax.annotation.Nullable
  private List<Vorgangsbezug> vorgangsbezug = new ArrayList<>();

  public static final String SERIALIZED_NAME_VORGANGSBEZUG_ANZAHL = "vorgangsbezug_anzahl";
  @SerializedName(SERIALIZED_NAME_VORGANGSBEZUG_ANZAHL)
  @javax.annotation.Nonnull
  private Integer vorgangsbezugAnzahl;

  public static final String SERIALIZED_NAME_RESSORT = "ressort";
  @SerializedName(SERIALIZED_NAME_RESSORT)
  @javax.annotation.Nullable
  private List<Ressort> ressort = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANLAGEN = "anlagen";
  @SerializedName(SERIALIZED_NAME_ANLAGEN)
  @javax.annotation.Nullable
  private String anlagen;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nullable
  private String text;

  public DrucksacheText() {
  }

  public DrucksacheText id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public DrucksacheText typ(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nonnull
  public TypEnum getTyp() {
    return typ;
  }

  public void setTyp(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
  }


  public DrucksacheText dokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
    return this;
  }

  /**
   * Get dokumentart
   * @return dokumentart
   */
  @javax.annotation.Nonnull
  public DokumentartEnum getDokumentart() {
    return dokumentart;
  }

  public void setDokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
  }


  public DrucksacheText drucksachetyp(@javax.annotation.Nonnull String drucksachetyp) {
    this.drucksachetyp = drucksachetyp;
    return this;
  }

  /**
   * Get drucksachetyp
   * @return drucksachetyp
   */
  @javax.annotation.Nonnull
  public String getDrucksachetyp() {
    return drucksachetyp;
  }

  public void setDrucksachetyp(@javax.annotation.Nonnull String drucksachetyp) {
    this.drucksachetyp = drucksachetyp;
  }


  public DrucksacheText dokumentnummer(@javax.annotation.Nonnull String dokumentnummer) {
    this.dokumentnummer = dokumentnummer;
    return this;
  }

  /**
   * Get dokumentnummer
   * @return dokumentnummer
   */
  @javax.annotation.Nonnull
  public String getDokumentnummer() {
    return dokumentnummer;
  }

  public void setDokumentnummer(@javax.annotation.Nonnull String dokumentnummer) {
    this.dokumentnummer = dokumentnummer;
  }


  public DrucksacheText wahlperiode(@javax.annotation.Nullable Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
    return this;
  }

  /**
   * Get wahlperiode
   * @return wahlperiode
   */
  @javax.annotation.Nullable
  public Integer getWahlperiode() {
    return wahlperiode;
  }

  public void setWahlperiode(@javax.annotation.Nullable Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
  }


  public DrucksacheText herausgeber(@javax.annotation.Nonnull HerausgeberEnum herausgeber) {
    this.herausgeber = herausgeber;
    return this;
  }

  /**
   * Get herausgeber
   * @return herausgeber
   */
  @javax.annotation.Nonnull
  public HerausgeberEnum getHerausgeber() {
    return herausgeber;
  }

  public void setHerausgeber(@javax.annotation.Nonnull HerausgeberEnum herausgeber) {
    this.herausgeber = herausgeber;
  }


  public DrucksacheText datum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
    return this;
  }

  /**
   * Get datum
   * @return datum
   */
  @javax.annotation.Nonnull
  public LocalDate getDatum() {
    return datum;
  }

  public void setDatum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
  }


  public DrucksacheText aktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
    return this;
  }

  /**
   * Letzte Aktualisierung der Entit√§t
   * @return aktualisiert
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAktualisiert() {
    return aktualisiert;
  }

  public void setAktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
  }


  public DrucksacheText titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public DrucksacheText autorenAnzeige(@javax.annotation.Nullable List<DrucksacheAutorenAnzeigeInner> autorenAnzeige) {
    this.autorenAnzeige = autorenAnzeige;
    return this;
  }

  public DrucksacheText addAutorenAnzeigeItem(DrucksacheAutorenAnzeigeInner autorenAnzeigeItem) {
    if (this.autorenAnzeige == null) {
      this.autorenAnzeige = new ArrayList<>();
    }
    this.autorenAnzeige.add(autorenAnzeigeItem);
    return this;
  }

  /**
   * Zusammenfassung der ersten 4 zur Anzeige markierten Autor:innen
   * @return autorenAnzeige
   */
  @javax.annotation.Nullable
  public List<DrucksacheAutorenAnzeigeInner> getAutorenAnzeige() {
    return autorenAnzeige;
  }

  public void setAutorenAnzeige(@javax.annotation.Nullable List<DrucksacheAutorenAnzeigeInner> autorenAnzeige) {
    this.autorenAnzeige = autorenAnzeige;
  }


  public DrucksacheText autorenAnzahl(@javax.annotation.Nonnull Integer autorenAnzahl) {
    this.autorenAnzahl = autorenAnzahl;
    return this;
  }

  /**
   * Gesamtzahl der Autor:innen
   * @return autorenAnzahl
   */
  @javax.annotation.Nonnull
  public Integer getAutorenAnzahl() {
    return autorenAnzahl;
  }

  public void setAutorenAnzahl(@javax.annotation.Nonnull Integer autorenAnzahl) {
    this.autorenAnzahl = autorenAnzahl;
  }


  public DrucksacheText fundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
    return this;
  }

  /**
   * Get fundstelle
   * @return fundstelle
   */
  @javax.annotation.Nonnull
  public Fundstelle getFundstelle() {
    return fundstelle;
  }

  public void setFundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
  }


  public DrucksacheText pdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
    return this;
  }

  /**
   * MD5-Pr√ºfsumme der PDF-Datei
   * @return pdfHash
   */
  @javax.annotation.Nullable
  public String getPdfHash() {
    return pdfHash;
  }

  public void setPdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
  }


  public DrucksacheText urheber(@javax.annotation.Nullable List<Urheber> urheber) {
    this.urheber = urheber;
    return this;
  }

  public DrucksacheText addUrheberItem(Urheber urheberItem) {
    if (this.urheber == null) {
      this.urheber = new ArrayList<>();
    }
    this.urheber.add(urheberItem);
    return this;
  }

  /**
   * Get urheber
   * @return urheber
   */
  @javax.annotation.Nullable
  public List<Urheber> getUrheber() {
    return urheber;
  }

  public void setUrheber(@javax.annotation.Nullable List<Urheber> urheber) {
    this.urheber = urheber;
  }


  public DrucksacheText vorgangsbezug(@javax.annotation.Nullable List<Vorgangsbezug> vorgangsbezug) {
    this.vorgangsbezug = vorgangsbezug;
    return this;
  }

  public DrucksacheText addVorgangsbezugItem(Vorgangsbezug vorgangsbezugItem) {
    if (this.vorgangsbezug == null) {
      this.vorgangsbezug = new ArrayList<>();
    }
    this.vorgangsbezug.add(vorgangsbezugItem);
    return this;
  }

  /**
   * Zusammenfassung der ersten 4 zugeh√∂rigen Vorg√§nge
   * @return vorgangsbezug
   */
  @javax.annotation.Nullable
  public List<Vorgangsbezug> getVorgangsbezug() {
    return vorgangsbezug;
  }

  public void setVorgangsbezug(@javax.annotation.Nullable List<Vorgangsbezug> vorgangsbezug) {
    this.vorgangsbezug = vorgangsbezug;
  }


  public DrucksacheText vorgangsbezugAnzahl(@javax.annotation.Nonnull Integer vorgangsbezugAnzahl) {
    this.vorgangsbezugAnzahl = vorgangsbezugAnzahl;
    return this;
  }

  /**
   * Gesamtzahl der zugeh√∂rigen Vorg√§nge
   * @return vorgangsbezugAnzahl
   */
  @javax.annotation.Nonnull
  public Integer getVorgangsbezugAnzahl() {
    return vorgangsbezugAnzahl;
  }

  public void setVorgangsbezugAnzahl(@javax.annotation.Nonnull Integer vorgangsbezugAnzahl) {
    this.vorgangsbezugAnzahl = vorgangsbezugAnzahl;
  }


  public DrucksacheText ressort(@javax.annotation.Nullable List<Ressort> ressort) {
    this.ressort = ressort;
    return this;
  }

  public DrucksacheText addRessortItem(Ressort ressortItem) {
    if (this.ressort == null) {
      this.ressort = new ArrayList<>();
    }
    this.ressort.add(ressortItem);
    return this;
  }

  /**
   * Get ressort
   * @return ressort
   */
  @javax.annotation.Nullable
  public List<Ressort> getRessort() {
    return ressort;
  }

  public void setRessort(@javax.annotation.Nullable List<Ressort> ressort) {
    this.ressort = ressort;
  }


  public DrucksacheText anlagen(@javax.annotation.Nullable String anlagen) {
    this.anlagen = anlagen;
    return this;
  }

  /**
   * Get anlagen
   * @return anlagen
   */
  @javax.annotation.Nullable
  public String getAnlagen() {
    return anlagen;
  }

  public void setAnlagen(@javax.annotation.Nullable String anlagen) {
    this.anlagen = anlagen;
  }


  public DrucksacheText text(@javax.annotation.Nullable String text) {
    this.text = text;
    return this;
  }

  /**
   * Volltext des Dokuments  Das Beispiel enth√§lt einen gek√ºrzten Auszug einer Drucksache. 
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nullable String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrucksacheText drucksacheText = (DrucksacheText) o;
    return Objects.equals(this.id, drucksacheText.id) &&
        Objects.equals(this.typ, drucksacheText.typ) &&
        Objects.equals(this.dokumentart, drucksacheText.dokumentart) &&
        Objects.equals(this.drucksachetyp, drucksacheText.drucksachetyp) &&
        Objects.equals(this.dokumentnummer, drucksacheText.dokumentnummer) &&
        Objects.equals(this.wahlperiode, drucksacheText.wahlperiode) &&
        Objects.equals(this.herausgeber, drucksacheText.herausgeber) &&
        Objects.equals(this.datum, drucksacheText.datum) &&
        Objects.equals(this.aktualisiert, drucksacheText.aktualisiert) &&
        Objects.equals(this.titel, drucksacheText.titel) &&
        Objects.equals(this.autorenAnzeige, drucksacheText.autorenAnzeige) &&
        Objects.equals(this.autorenAnzahl, drucksacheText.autorenAnzahl) &&
        Objects.equals(this.fundstelle, drucksacheText.fundstelle) &&
        Objects.equals(this.pdfHash, drucksacheText.pdfHash) &&
        Objects.equals(this.urheber, drucksacheText.urheber) &&
        Objects.equals(this.vorgangsbezug, drucksacheText.vorgangsbezug) &&
        Objects.equals(this.vorgangsbezugAnzahl, drucksacheText.vorgangsbezugAnzahl) &&
        Objects.equals(this.ressort, drucksacheText.ressort) &&
        Objects.equals(this.anlagen, drucksacheText.anlagen) &&
        Objects.equals(this.text, drucksacheText.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typ, dokumentart, drucksachetyp, dokumentnummer, wahlperiode, herausgeber, datum, aktualisiert, titel, autorenAnzeige, autorenAnzahl, fundstelle, pdfHash, urheber, vorgangsbezug, vorgangsbezugAnzahl, ressort, anlagen, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrucksacheText {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    dokumentart: ").append(toIndentedString(dokumentart)).append("\n");
    sb.append("    drucksachetyp: ").append(toIndentedString(drucksachetyp)).append("\n");
    sb.append("    dokumentnummer: ").append(toIndentedString(dokumentnummer)).append("\n");
    sb.append("    wahlperiode: ").append(toIndentedString(wahlperiode)).append("\n");
    sb.append("    herausgeber: ").append(toIndentedString(herausgeber)).append("\n");
    sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
    sb.append("    aktualisiert: ").append(toIndentedString(aktualisiert)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    autorenAnzeige: ").append(toIndentedString(autorenAnzeige)).append("\n");
    sb.append("    autorenAnzahl: ").append(toIndentedString(autorenAnzahl)).append("\n");
    sb.append("    fundstelle: ").append(toIndentedString(fundstelle)).append("\n");
    sb.append("    pdfHash: ").append(toIndentedString(pdfHash)).append("\n");
    sb.append("    urheber: ").append(toIndentedString(urheber)).append("\n");
    sb.append("    vorgangsbezug: ").append(toIndentedString(vorgangsbezug)).append("\n");
    sb.append("    vorgangsbezugAnzahl: ").append(toIndentedString(vorgangsbezugAnzahl)).append("\n");
    sb.append("    ressort: ").append(toIndentedString(ressort)).append("\n");
    sb.append("    anlagen: ").append(toIndentedString(anlagen)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("typ");
    openapiFields.add("dokumentart");
    openapiFields.add("drucksachetyp");
    openapiFields.add("dokumentnummer");
    openapiFields.add("wahlperiode");
    openapiFields.add("herausgeber");
    openapiFields.add("datum");
    openapiFields.add("aktualisiert");
    openapiFields.add("titel");
    openapiFields.add("autoren_anzeige");
    openapiFields.add("autoren_anzahl");
    openapiFields.add("fundstelle");
    openapiFields.add("pdf_hash");
    openapiFields.add("urheber");
    openapiFields.add("vorgangsbezug");
    openapiFields.add("vorgangsbezug_anzahl");
    openapiFields.add("ressort");
    openapiFields.add("anlagen");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("typ");
    openapiRequiredFields.add("dokumentart");
    openapiRequiredFields.add("drucksachetyp");
    openapiRequiredFields.add("dokumentnummer");
    openapiRequiredFields.add("herausgeber");
    openapiRequiredFields.add("datum");
    openapiRequiredFields.add("aktualisiert");
    openapiRequiredFields.add("titel");
    openapiRequiredFields.add("autoren_anzahl");
    openapiRequiredFields.add("fundstelle");
    openapiRequiredFields.add("vorgangsbezug_anzahl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DrucksacheText
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DrucksacheText.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DrucksacheText is not found in the empty JSON string", DrucksacheText.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DrucksacheText.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DrucksacheText` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DrucksacheText.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      // validate the required field `typ`
      TypEnum.validateJsonElement(jsonObj.get("typ"));
      if (!jsonObj.get("dokumentart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentart").toString()));
      }
      // validate the required field `dokumentart`
      DokumentartEnum.validateJsonElement(jsonObj.get("dokumentart"));
      if (!jsonObj.get("drucksachetyp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drucksachetyp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drucksachetyp").toString()));
      }
      if (!jsonObj.get("dokumentnummer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentnummer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentnummer").toString()));
      }
      if (!jsonObj.get("herausgeber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `herausgeber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("herausgeber").toString()));
      }
      // validate the required field `herausgeber`
      HerausgeberEnum.validateJsonElement(jsonObj.get("herausgeber"));
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if (jsonObj.get("autoren_anzeige") != null && !jsonObj.get("autoren_anzeige").isJsonNull()) {
        JsonArray jsonArrayautorenAnzeige = jsonObj.getAsJsonArray("autoren_anzeige");
        if (jsonArrayautorenAnzeige != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoren_anzeige").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoren_anzeige` to be an array in the JSON string but got `%s`", jsonObj.get("autoren_anzeige").toString()));
          }

          // validate the optional field `autoren_anzeige` (array)
          for (int i = 0; i < jsonArrayautorenAnzeige.size(); i++) {
            DrucksacheAutorenAnzeigeInner.validateJsonElement(jsonArrayautorenAnzeige.get(i));
          };
        }
      }
      // validate the required field `fundstelle`
      Fundstelle.validateJsonElement(jsonObj.get("fundstelle"));
      if ((jsonObj.get("pdf_hash") != null && !jsonObj.get("pdf_hash").isJsonNull()) && !jsonObj.get("pdf_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_hash").toString()));
      }
      if (jsonObj.get("urheber") != null && !jsonObj.get("urheber").isJsonNull()) {
        JsonArray jsonArrayurheber = jsonObj.getAsJsonArray("urheber");
        if (jsonArrayurheber != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urheber").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urheber` to be an array in the JSON string but got `%s`", jsonObj.get("urheber").toString()));
          }

          // validate the optional field `urheber` (array)
          for (int i = 0; i < jsonArrayurheber.size(); i++) {
            Urheber.validateJsonElement(jsonArrayurheber.get(i));
          };
        }
      }
      if (jsonObj.get("vorgangsbezug") != null && !jsonObj.get("vorgangsbezug").isJsonNull()) {
        JsonArray jsonArrayvorgangsbezug = jsonObj.getAsJsonArray("vorgangsbezug");
        if (jsonArrayvorgangsbezug != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vorgangsbezug").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vorgangsbezug` to be an array in the JSON string but got `%s`", jsonObj.get("vorgangsbezug").toString()));
          }

          // validate the optional field `vorgangsbezug` (array)
          for (int i = 0; i < jsonArrayvorgangsbezug.size(); i++) {
            Vorgangsbezug.validateJsonElement(jsonArrayvorgangsbezug.get(i));
          };
        }
      }
      if (jsonObj.get("ressort") != null && !jsonObj.get("ressort").isJsonNull()) {
        JsonArray jsonArrayressort = jsonObj.getAsJsonArray("ressort");
        if (jsonArrayressort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ressort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ressort` to be an array in the JSON string but got `%s`", jsonObj.get("ressort").toString()));
          }

          // validate the optional field `ressort` (array)
          for (int i = 0; i < jsonArrayressort.size(); i++) {
            Ressort.validateJsonElement(jsonArrayressort.get(i));
          };
        }
      }
      if ((jsonObj.get("anlagen") != null && !jsonObj.get("anlagen").isJsonNull()) && !jsonObj.get("anlagen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anlagen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anlagen").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DrucksacheText.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DrucksacheText' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DrucksacheText> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DrucksacheText.class));

       return (TypeAdapter<T>) new TypeAdapter<DrucksacheText>() {
           @Override
           public void write(JsonWriter out, DrucksacheText value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DrucksacheText read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DrucksacheText given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DrucksacheText
   * @throws IOException if the JSON string is invalid with respect to DrucksacheText
   */
  public static DrucksacheText fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DrucksacheText.class);
  }

  /**
   * Convert an instance of DrucksacheText to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

