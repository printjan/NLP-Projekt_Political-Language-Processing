/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PersonRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert Personenstammdaten zu einer Person
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Person {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NACHNAME = "nachname";
  @SerializedName(SERIALIZED_NAME_NACHNAME)
  @javax.annotation.Nonnull
  private String nachname;

  public static final String SERIALIZED_NAME_VORNAME = "vorname";
  @SerializedName(SERIALIZED_NAME_VORNAME)
  @javax.annotation.Nonnull
  private String vorname;

  public static final String SERIALIZED_NAME_NAMENSZUSATZ = "namenszusatz";
  @SerializedName(SERIALIZED_NAME_NAMENSZUSATZ)
  @javax.annotation.Nullable
  private String namenszusatz;

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  @javax.annotation.Nonnull
  private String typ;

  public static final String SERIALIZED_NAME_WAHLPERIODE = "wahlperiode";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE)
  @javax.annotation.Nullable
  private Integer wahlperiode;

  public static final String SERIALIZED_NAME_BASISDATUM = "basisdatum";
  @SerializedName(SERIALIZED_NAME_BASISDATUM)
  @javax.annotation.Nullable
  private LocalDate basisdatum;

  public static final String SERIALIZED_NAME_DATUM = "datum";
  @SerializedName(SERIALIZED_NAME_DATUM)
  @javax.annotation.Nullable
  private LocalDate datum;

  public static final String SERIALIZED_NAME_AKTUALISIERT = "aktualisiert";
  @SerializedName(SERIALIZED_NAME_AKTUALISIERT)
  @javax.annotation.Nonnull
  private OffsetDateTime aktualisiert;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_PERSON_ROLES = "person_roles";
  @SerializedName(SERIALIZED_NAME_PERSON_ROLES)
  @javax.annotation.Nullable
  private List<PersonRole> personRoles = new ArrayList<>();

  public Person() {
  }

  public Person id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Person nachname(@javax.annotation.Nonnull String nachname) {
    this.nachname = nachname;
    return this;
  }

  /**
   * Get nachname
   * @return nachname
   */
  @javax.annotation.Nonnull
  public String getNachname() {
    return nachname;
  }

  public void setNachname(@javax.annotation.Nonnull String nachname) {
    this.nachname = nachname;
  }


  public Person vorname(@javax.annotation.Nonnull String vorname) {
    this.vorname = vorname;
    return this;
  }

  /**
   * Get vorname
   * @return vorname
   */
  @javax.annotation.Nonnull
  public String getVorname() {
    return vorname;
  }

  public void setVorname(@javax.annotation.Nonnull String vorname) {
    this.vorname = vorname;
  }


  public Person namenszusatz(@javax.annotation.Nullable String namenszusatz) {
    this.namenszusatz = namenszusatz;
    return this;
  }

  /**
   * Get namenszusatz
   * @return namenszusatz
   */
  @javax.annotation.Nullable
  public String getNamenszusatz() {
    return namenszusatz;
  }

  public void setNamenszusatz(@javax.annotation.Nullable String namenszusatz) {
    this.namenszusatz = namenszusatz;
  }


  public Person typ(@javax.annotation.Nonnull String typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nonnull
  public String getTyp() {
    return typ;
  }

  public void setTyp(@javax.annotation.Nonnull String typ) {
    this.typ = typ;
  }


  public Person wahlperiode(@javax.annotation.Nullable Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
    return this;
  }

  /**
   * Wahlperiode des ersten zugehörigen Dokuments
   * @return wahlperiode
   */
  @javax.annotation.Nullable
  public Integer getWahlperiode() {
    return wahlperiode;
  }

  public void setWahlperiode(@javax.annotation.Nullable Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
  }


  public Person basisdatum(@javax.annotation.Nullable LocalDate basisdatum) {
    this.basisdatum = basisdatum;
    return this;
  }

  /**
   * Datum des ersten zugehörigen Dokuments
   * @return basisdatum
   */
  @javax.annotation.Nullable
  public LocalDate getBasisdatum() {
    return basisdatum;
  }

  public void setBasisdatum(@javax.annotation.Nullable LocalDate basisdatum) {
    this.basisdatum = basisdatum;
  }


  public Person datum(@javax.annotation.Nullable LocalDate datum) {
    this.datum = datum;
    return this;
  }

  /**
   * Datum des letzten zugehörigen Dokuments
   * @return datum
   */
  @javax.annotation.Nullable
  public LocalDate getDatum() {
    return datum;
  }

  public void setDatum(@javax.annotation.Nullable LocalDate datum) {
    this.datum = datum;
  }


  public Person aktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
    return this;
  }

  /**
   * Letzte Aktualisierung der Entität
   * @return aktualisiert
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAktualisiert() {
    return aktualisiert;
  }

  public void setAktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
  }


  public Person titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public Person personRoles(@javax.annotation.Nullable List<PersonRole> personRoles) {
    this.personRoles = personRoles;
    return this;
  }

  public Person addPersonRolesItem(PersonRole personRolesItem) {
    if (this.personRoles == null) {
      this.personRoles = new ArrayList<>();
    }
    this.personRoles.add(personRolesItem);
    return this;
  }

  /**
   * Nebeneinträge mit bspw. abweichenden Funktionen oder Namensänderungen
   * @return personRoles
   */
  @javax.annotation.Nullable
  public List<PersonRole> getPersonRoles() {
    return personRoles;
  }

  public void setPersonRoles(@javax.annotation.Nullable List<PersonRole> personRoles) {
    this.personRoles = personRoles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.id, person.id) &&
        Objects.equals(this.nachname, person.nachname) &&
        Objects.equals(this.vorname, person.vorname) &&
        Objects.equals(this.namenszusatz, person.namenszusatz) &&
        Objects.equals(this.typ, person.typ) &&
        Objects.equals(this.wahlperiode, person.wahlperiode) &&
        Objects.equals(this.basisdatum, person.basisdatum) &&
        Objects.equals(this.datum, person.datum) &&
        Objects.equals(this.aktualisiert, person.aktualisiert) &&
        Objects.equals(this.titel, person.titel) &&
        Objects.equals(this.personRoles, person.personRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nachname, vorname, namenszusatz, typ, wahlperiode, basisdatum, datum, aktualisiert, titel, personRoles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nachname: ").append(toIndentedString(nachname)).append("\n");
    sb.append("    vorname: ").append(toIndentedString(vorname)).append("\n");
    sb.append("    namenszusatz: ").append(toIndentedString(namenszusatz)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    wahlperiode: ").append(toIndentedString(wahlperiode)).append("\n");
    sb.append("    basisdatum: ").append(toIndentedString(basisdatum)).append("\n");
    sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
    sb.append("    aktualisiert: ").append(toIndentedString(aktualisiert)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    personRoles: ").append(toIndentedString(personRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nachname");
    openapiFields.add("vorname");
    openapiFields.add("namenszusatz");
    openapiFields.add("typ");
    openapiFields.add("wahlperiode");
    openapiFields.add("basisdatum");
    openapiFields.add("datum");
    openapiFields.add("aktualisiert");
    openapiFields.add("titel");
    openapiFields.add("person_roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("nachname");
    openapiRequiredFields.add("vorname");
    openapiRequiredFields.add("typ");
    openapiRequiredFields.add("aktualisiert");
    openapiRequiredFields.add("titel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Person
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Person.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("nachname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nachname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nachname").toString()));
      }
      if (!jsonObj.get("vorname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorname").toString()));
      }
      if ((jsonObj.get("namenszusatz") != null && !jsonObj.get("namenszusatz").isJsonNull()) && !jsonObj.get("namenszusatz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namenszusatz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namenszusatz").toString()));
      }
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if (jsonObj.get("person_roles") != null && !jsonObj.get("person_roles").isJsonNull()) {
        JsonArray jsonArraypersonRoles = jsonObj.getAsJsonArray("person_roles");
        if (jsonArraypersonRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("person_roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `person_roles` to be an array in the JSON string but got `%s`", jsonObj.get("person_roles").toString()));
          }

          // validate the optional field `person_roles` (array)
          for (int i = 0; i < jsonArraypersonRoles.size(); i++) {
            PersonRole.validateJsonElement(jsonArraypersonRoles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Person given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Person
   * @throws IOException if the JSON string is invalid with respect to Person
   */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

  /**
   * Convert an instance of Person to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

