/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Drucksache;
import org.openapitools.client.model.DrucksacheListResponse;
import org.openapitools.client.model.DrucksacheText;
import org.openapitools.client.model.DrucksacheTextListResponse;
import org.openapitools.client.model.GetVorgang404Response;
import org.openapitools.client.model.GetVorgangList400Response;
import org.openapitools.client.model.GetVorgangList401Response;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Zuordnung;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DrucksachenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DrucksachenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DrucksachenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDrucksache
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drucksache/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDrucksacheValidateBeforeCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDrucksache(Async)");
        }

        return getDrucksacheCall(id, format, _callback);

    }

    /**
     * Liefert Metadaten zu einer Drucksache
     * 
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return Drucksache
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public Drucksache getDrucksache(Integer id, String format) throws ApiException {
        ApiResponse<Drucksache> localVarResp = getDrucksacheWithHttpInfo(id, format);
        return localVarResp.getData();
    }

    /**
     * Liefert Metadaten zu einer Drucksache
     * 
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return ApiResponse&lt;Drucksache&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Drucksache> getDrucksacheWithHttpInfo(Integer id, String format) throws ApiException {
        okhttp3.Call localVarCall = getDrucksacheValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<Drucksache>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liefert Metadaten zu einer Drucksache (asynchronously)
     * 
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheAsync(Integer id, String format, final ApiCallback<Drucksache> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDrucksacheValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<Drucksache>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDrucksacheList
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheListCall(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drucksache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fAktualisiertStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.start", fAktualisiertStart));
        }

        if (fAktualisiertEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.end", fAktualisiertEnd));
        }

        if (fDatumStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.start", fDatumStart));
        }

        if (fDatumEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.end", fDatumEnd));
        }

        if (fDokumentnummer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.dokumentnummer", fDokumentnummer));
        }

        if (fDrucksachetyp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.drucksachetyp", fDrucksachetyp));
        }

        if (fId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.id", fId));
        }

        if (fRessortFdf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.ressort_fdf", fRessortFdf));
        }

        if (fTitel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.titel", fTitel));
        }

        if (fUrheber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.urheber", fUrheber));
        }

        if (fVorgangstyp != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp", fVorgangstyp));
        }

        if (fVorgangstypNotation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp_notation", fVorgangstypNotation));
        }

        if (fWahlperiode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.wahlperiode", fWahlperiode));
        }

        if (fZuordnung != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.zuordnung", fZuordnung));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDrucksacheListValidateBeforeCall(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format, final ApiCallback _callback) throws ApiException {
        return getDrucksacheListCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, _callback);

    }

    /**
     * Liefert eine Liste von Metadaten zu Drucksachen
     * 
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return DrucksacheListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public DrucksacheListResponse getDrucksacheList(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format) throws ApiException {
        ApiResponse<DrucksacheListResponse> localVarResp = getDrucksacheListWithHttpInfo(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format);
        return localVarResp.getData();
    }

    /**
     * Liefert eine Liste von Metadaten zu Drucksachen
     * 
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return ApiResponse&lt;DrucksacheListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DrucksacheListResponse> getDrucksacheListWithHttpInfo(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format) throws ApiException {
        okhttp3.Call localVarCall = getDrucksacheListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, null);
        Type localVarReturnType = new TypeToken<DrucksacheListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liefert eine Liste von Metadaten zu Drucksachen (asynchronously)
     * 
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheListAsync(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format, final ApiCallback<DrucksacheListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDrucksacheListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, _callback);
        Type localVarReturnType = new TypeToken<DrucksacheListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDrucksacheText
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheTextCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drucksache-text/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDrucksacheTextValidateBeforeCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDrucksacheText(Async)");
        }

        return getDrucksacheTextCall(id, format, _callback);

    }

    /**
     * Liefert Volltext und Metadaten zu einer Drucksache
     * 
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return DrucksacheText
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public DrucksacheText getDrucksacheText(Integer id, String format) throws ApiException {
        ApiResponse<DrucksacheText> localVarResp = getDrucksacheTextWithHttpInfo(id, format);
        return localVarResp.getData();
    }

    /**
     * Liefert Volltext und Metadaten zu einer Drucksache
     * 
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return ApiResponse&lt;DrucksacheText&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DrucksacheText> getDrucksacheTextWithHttpInfo(Integer id, String format) throws ApiException {
        okhttp3.Call localVarCall = getDrucksacheTextValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<DrucksacheText>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liefert Volltext und Metadaten zu einer Drucksache (asynchronously)
     * 
     * @param id  (required)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten einer Drucksache </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Die angefragte Entität wurde nicht gefunden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheTextAsync(Integer id, String format, final ApiCallback<DrucksacheText> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDrucksacheTextValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<DrucksacheText>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDrucksacheTextList
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheTextListCall(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drucksache-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fAktualisiertStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.start", fAktualisiertStart));
        }

        if (fAktualisiertEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.end", fAktualisiertEnd));
        }

        if (fDatumStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.start", fDatumStart));
        }

        if (fDatumEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.end", fDatumEnd));
        }

        if (fDokumentnummer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.dokumentnummer", fDokumentnummer));
        }

        if (fDrucksachetyp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.drucksachetyp", fDrucksachetyp));
        }

        if (fId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.id", fId));
        }

        if (fRessortFdf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.ressort_fdf", fRessortFdf));
        }

        if (fTitel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.titel", fTitel));
        }

        if (fUrheber != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.urheber", fUrheber));
        }

        if (fVorgangstyp != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp", fVorgangstyp));
        }

        if (fVorgangstypNotation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp_notation", fVorgangstypNotation));
        }

        if (fWahlperiode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.wahlperiode", fWahlperiode));
        }

        if (fZuordnung != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.zuordnung", fZuordnung));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDrucksacheTextListValidateBeforeCall(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format, final ApiCallback _callback) throws ApiException {
        return getDrucksacheTextListCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, _callback);

    }

    /**
     * Liefert eine Liste von Volltexten und Metadaten zu Drucksachen
     * 
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return DrucksacheTextListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public DrucksacheTextListResponse getDrucksacheTextList(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format) throws ApiException {
        ApiResponse<DrucksacheTextListResponse> localVarResp = getDrucksacheTextListWithHttpInfo(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format);
        return localVarResp.getData();
    }

    /**
     * Liefert eine Liste von Volltexten und Metadaten zu Drucksachen
     * 
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @return ApiResponse&lt;DrucksacheTextListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DrucksacheTextListResponse> getDrucksacheTextListWithHttpInfo(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format) throws ApiException {
        okhttp3.Call localVarCall = getDrucksacheTextListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, null);
        Type localVarReturnType = new TypeToken<DrucksacheTextListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liefert eine Liste von Volltexten und Metadaten zu Drucksachen (asynchronously)
     * 
     * @param fAktualisiertStart Frühestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fAktualisiertEnd Spätestes Aktualisierungsdatum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem letzten Aktualisierungsdatum.  (optional)
     * @param fDatumStart Frühestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDatumEnd Spätestes Datum der Entität  Selektiert Entitäten in einem Datumsbereich basierend auf dem Dokumentdatum. Für Vorgänge und Personen wird der Datumsbereich aller zugehörigen Dokumente herangezogen.  (optional)
     * @param fDokumentnummer Dokumentnummer einer Drucksache oder eines Plenarprotokolls  Selektiert alle Entitäten, die mit der angegebenen Dokumentnummer verknüpft sind. Kann wiederholt werden, um mehrere Dokumentnummern zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fDrucksachetyp Typ der Drucksache  Selektiert alle Entitäten, die mit dem angegebenen Drucksachetyp verknüpft sind.  (optional)
     * @param fId ID der Entität  Kann wiederholt werden, um mehrere Entitäten zu selektieren.  (optional)
     * @param fRessortFdf Ressort (federführend)  Selektiert alle Entitäten, die mit dem angegebenen federführenden Ressort in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Ressorts zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere federführende Ressorts ist mit einer einzigen Abfrage nicht möglich. Die federführenden Ressorts müssen dazu einzeln abgefragt werden.  (optional)
     * @param fTitel Titel  Selektiert alle Entitäten, die den angegebenen Suchbegriff im Titel enthalten. Kann wiederholt werden, um mehrere Titel zu selektieren. Hinterlegt ist eine ODER-Suche. Eine Einzelwortsuche ist möglich. Mehrere Suchbegriffe hintereinander werden als Phrase gesucht.  (optional)
     * @param fUrheber Urheber  Selektiert alle Entitäten, die mit dem angegebenen Urheber in einer Drucksache verknüpft sind. Kann wiederholt werden, um die Schnittmenge mehrerer Urheber zu selektieren. Hinterlegt ist eine UND-Suche.  Eine ODER-Suche über mehrere Urheber ist mit einer einzigen Abfrage nicht möglich. Die Urheber müssen dazu einzeln abgefragt werden.  (optional)
     * @param fVorgangstyp Vorgangstyp  Selektiert alle Entitäten, die dem angegebenen Vorgangstyp zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fVorgangstypNotation Vorgangstyp-Notation  Selektiert alle Entitäten, die der angegebenen Vorgangstyp-Notation zugeordnet sind. Kann wiederholt werden, um mehrere Vorgangstypen zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fWahlperiode Nummer der Wahlperiode  Selektiert alle Entitäten, die der angegebenen Wahlperiode zugeordnet sind. Kann wiederholt werden, um mehrere Wahlperioden zu selektieren. Hinterlegt ist eine ODER-Suche.  (optional)
     * @param fZuordnung Zuordnung der Entität zum Bundestag, Bundesrat, Bundesversammlung oder Europakammer (optional)
     * @param cursor Position des Cursors zur Anfrage weiterer Entitäten  Übersteigt die Anzahl der gefundenen Entitäten das jeweilige Limit, muss eine Folgeanfrage gestellt werden, um weitere Entitäten zu laden. Eine Folgeanfrage wird gebildet, indem alle Parameter der ursprünglichen Anfrage wiederholt werden und zusätzlich der cursor Parameter der letzten Antwort eingesetzt wird. Es können solange Folgeanfragen gestellt werden, bis sich der cursor nicht mehr ändert. Dies signalisiert, dass alle Entitäten geladen wurden.  (optional)
     * @param format Steuert das Datenformat der Antwort, möglich sind JSON (voreingestellt) oder XML. (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Volltext und Metadaten zu Drucksachen </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Syntaxfehler in einem der Anfrageparameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Ein gültiger API-Key ist für alle Anfragen erforderlich. Dieser kann entweder im HTTP Authorization Header oder als Anfrageparameter apikey gesendet werden. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDrucksacheTextListAsync(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, String fDrucksachetyp, List<Integer> fId, List<String> fRessortFdf, List<String> fTitel, List<String> fUrheber, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format, final ApiCallback<DrucksacheTextListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDrucksacheTextListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fDrucksachetyp, fId, fRessortFdf, fTitel, fUrheber, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, _callback);
        Type localVarReturnType = new TypeToken<DrucksacheTextListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
