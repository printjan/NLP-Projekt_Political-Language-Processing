/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems f√ºr Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AktivitaetAnzeige;
import org.openapitools.client.model.Beschlussfassung;
import org.openapitools.client.model.Fundstelle;
import org.openapitools.client.model.Ressort;
import org.openapitools.client.model.Ueberweisung;
import org.openapitools.client.model.Urheber;
import org.openapitools.client.model.Vorgangspositionbezug;
import org.openapitools.client.model.Zuordnung;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert Metadaten zu einer Vorgangsposition (Vorgangsschritt).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Vorgangsposition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_VORGANGSPOSITION = "vorgangsposition";
  @SerializedName(SERIALIZED_NAME_VORGANGSPOSITION)
  @javax.annotation.Nonnull
  private String vorgangsposition;

  public static final String SERIALIZED_NAME_ZUORDNUNG = "zuordnung";
  @SerializedName(SERIALIZED_NAME_ZUORDNUNG)
  @javax.annotation.Nonnull
  private Zuordnung zuordnung;

  public static final String SERIALIZED_NAME_GANG = "gang";
  @SerializedName(SERIALIZED_NAME_GANG)
  @javax.annotation.Nonnull
  private Boolean gang;

  public static final String SERIALIZED_NAME_FORTSETZUNG = "fortsetzung";
  @SerializedName(SERIALIZED_NAME_FORTSETZUNG)
  @javax.annotation.Nonnull
  private Boolean fortsetzung;

  public static final String SERIALIZED_NAME_NACHTRAG = "nachtrag";
  @SerializedName(SERIALIZED_NAME_NACHTRAG)
  @javax.annotation.Nonnull
  private Boolean nachtrag;

  public static final String SERIALIZED_NAME_VORGANGSTYP = "vorgangstyp";
  @SerializedName(SERIALIZED_NAME_VORGANGSTYP)
  @javax.annotation.Nonnull
  private String vorgangstyp;

  /**
   * Gets or Sets typ
   */
  @JsonAdapter(TypEnum.Adapter.class)
  public enum TypEnum {
    VORGANGSPOSITION("Vorgangsposition");

    private String value;

    TypEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypEnum fromValue(String value) {
      for (TypEnum b : TypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  @javax.annotation.Nonnull
  private TypEnum typ;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  /**
   * Gets or Sets dokumentart
   */
  @JsonAdapter(DokumentartEnum.Adapter.class)
  public enum DokumentartEnum {
    DRUCKSACHE("Drucksache"),
    
    PLENARPROTOKOLL("Plenarprotokoll");

    private String value;

    DokumentartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DokumentartEnum fromValue(String value) {
      for (DokumentartEnum b : DokumentartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DokumentartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DokumentartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DokumentartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DokumentartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DokumentartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOKUMENTART = "dokumentart";
  @SerializedName(SERIALIZED_NAME_DOKUMENTART)
  @javax.annotation.Nonnull
  private DokumentartEnum dokumentart;

  public static final String SERIALIZED_NAME_VORGANG_ID = "vorgang_id";
  @SerializedName(SERIALIZED_NAME_VORGANG_ID)
  @javax.annotation.Nonnull
  private String vorgangId;

  public static final String SERIALIZED_NAME_DATUM = "datum";
  @SerializedName(SERIALIZED_NAME_DATUM)
  @javax.annotation.Nonnull
  private LocalDate datum;

  public static final String SERIALIZED_NAME_AKTUALISIERT = "aktualisiert";
  @SerializedName(SERIALIZED_NAME_AKTUALISIERT)
  @javax.annotation.Nonnull
  private OffsetDateTime aktualisiert;

  public static final String SERIALIZED_NAME_FUNDSTELLE = "fundstelle";
  @SerializedName(SERIALIZED_NAME_FUNDSTELLE)
  @javax.annotation.Nonnull
  private Fundstelle fundstelle;

  public static final String SERIALIZED_NAME_URHEBER = "urheber";
  @SerializedName(SERIALIZED_NAME_URHEBER)
  @javax.annotation.Nullable
  private List<Urheber> urheber = new ArrayList<>();

  public static final String SERIALIZED_NAME_UEBERWEISUNG = "ueberweisung";
  @SerializedName(SERIALIZED_NAME_UEBERWEISUNG)
  @javax.annotation.Nullable
  private List<Ueberweisung> ueberweisung = new ArrayList<>();

  public static final String SERIALIZED_NAME_AKTIVITAET_ANZEIGE = "aktivitaet_anzeige";
  @SerializedName(SERIALIZED_NAME_AKTIVITAET_ANZEIGE)
  @javax.annotation.Nullable
  private List<AktivitaetAnzeige> aktivitaetAnzeige = new ArrayList<>();

  public static final String SERIALIZED_NAME_AKTIVITAET_ANZAHL = "aktivitaet_anzahl";
  @SerializedName(SERIALIZED_NAME_AKTIVITAET_ANZAHL)
  @javax.annotation.Nonnull
  private Integer aktivitaetAnzahl;

  public static final String SERIALIZED_NAME_RESSORT = "ressort";
  @SerializedName(SERIALIZED_NAME_RESSORT)
  @javax.annotation.Nullable
  private List<Ressort> ressort = new ArrayList<>();

  public static final String SERIALIZED_NAME_BESCHLUSSFASSUNG = "beschlussfassung";
  @SerializedName(SERIALIZED_NAME_BESCHLUSSFASSUNG)
  @javax.annotation.Nullable
  private List<Beschlussfassung> beschlussfassung = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATSDOK = "ratsdok";
  @SerializedName(SERIALIZED_NAME_RATSDOK)
  @javax.annotation.Nullable
  private String ratsdok;

  public static final String SERIALIZED_NAME_KOM = "kom";
  @SerializedName(SERIALIZED_NAME_KOM)
  @javax.annotation.Nullable
  private String kom;

  public static final String SERIALIZED_NAME_SEK = "sek";
  @SerializedName(SERIALIZED_NAME_SEK)
  @javax.annotation.Nullable
  private String sek;

  public static final String SERIALIZED_NAME_MITBERATEN = "mitberaten";
  @SerializedName(SERIALIZED_NAME_MITBERATEN)
  @javax.annotation.Nullable
  private List<Vorgangspositionbezug> mitberaten = new ArrayList<>();

  public static final String SERIALIZED_NAME_ABSTRACT = "abstract";
  @SerializedName(SERIALIZED_NAME_ABSTRACT)
  @javax.annotation.Nullable
  private String _abstract;

  public Vorgangsposition() {
  }

  public Vorgangsposition id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Vorgangsposition vorgangsposition(@javax.annotation.Nonnull String vorgangsposition) {
    this.vorgangsposition = vorgangsposition;
    return this;
  }

  /**
   * Get vorgangsposition
   * @return vorgangsposition
   */
  @javax.annotation.Nonnull
  public String getVorgangsposition() {
    return vorgangsposition;
  }

  public void setVorgangsposition(@javax.annotation.Nonnull String vorgangsposition) {
    this.vorgangsposition = vorgangsposition;
  }


  public Vorgangsposition zuordnung(@javax.annotation.Nonnull Zuordnung zuordnung) {
    this.zuordnung = zuordnung;
    return this;
  }

  /**
   * Get zuordnung
   * @return zuordnung
   */
  @javax.annotation.Nonnull
  public Zuordnung getZuordnung() {
    return zuordnung;
  }

  public void setZuordnung(@javax.annotation.Nonnull Zuordnung zuordnung) {
    this.zuordnung = zuordnung;
  }


  public Vorgangsposition gang(@javax.annotation.Nonnull Boolean gang) {
    this.gang = gang;
    return this;
  }

  /**
   * Alle Vorgangsschritte, die von besonderer Bedeutung f√ºr den Fortgang der Beratung sind, werden durch das Attribut &#x60;gang: true&#x60; gekennzeichnet.  Ist ein solcher Vorgangsschritt mit einer Drucksache verkn√ºpft, werden im Frontend unter der Benennung \&quot;Wichtige Drucksachen\&quot; Herausgeber, Nummer und Typ sowie das Datum der entsprechenden Drucksachen ausgegeben (z.B. BT-Drs 18/13014 (Beschlussempfehlung), 28.06.2017).  Ist er mit einem Plenarprotokoll verkn√ºpft, werden im Frontend unter der Benennung \&quot;Plenum\&quot; der Klartext der Vorgangsposition, Datum, Herausgeber und Nummer des Plenarprotokolls mit Anfangsseite/Quadrant und Endseite/Quadrant dargestellt (z.B. 2. Beratung: 29.06.2017, BT-PlPr 18/243, S. 24964C - 24973C). 
   * @return gang
   */
  @javax.annotation.Nonnull
  public Boolean getGang() {
    return gang;
  }

  public void setGang(@javax.annotation.Nonnull Boolean gang) {
    this.gang = gang;
  }


  public Vorgangsposition fortsetzung(@javax.annotation.Nonnull Boolean fortsetzung) {
    this.fortsetzung = fortsetzung;
    return this;
  }

  /**
   * Erstreckt sich eine Beratung √ºber mehrere Plenarprotokolle, so m√ºssen entsprechend viele Vorgangsschritte mit je gleicher Vorgangsposition im Vorgangsablauf angelegt werden. Der zweite und jeder weitere dieser Schritte wird dann als \&quot;Fortsetzung\&quot; gekennzeichnet (Attribut &#x60;fortsetzung: true&#x60;).  F√ºr die Beratung des Gesetzentwurfs f√ºr die Feststellung des Haushaltsplanes (Haushaltsberatungen) gelten abweichende Regelungen. 
   * @return fortsetzung
   */
  @javax.annotation.Nonnull
  public Boolean getFortsetzung() {
    return fortsetzung;
  }

  public void setFortsetzung(@javax.annotation.Nonnull Boolean fortsetzung) {
    this.fortsetzung = fortsetzung;
  }


  public Vorgangsposition nachtrag(@javax.annotation.Nonnull Boolean nachtrag) {
    this.nachtrag = nachtrag;
    return this;
  }

  /**
   * Eine Auswertungseinheit eines Plenarprotokolls kann nur an genau einen Vorgangsschritt angebunden werden.  M√ºssen aber mehrere Auswertungseinheiten f√ºr einen Vorgangsschritt gebildet werden (weil die Erg√§nzung einer Rede erst in einem sp√§teren Protokoll erscheint oder weil sich z.B. bei einer Verbundenen Beratung (¬ß 24 GO-BT) nicht alle Schriftlichen Erkl√§rungen nach ¬ß 31 GO-BT auf s√§mtliche Vorlagen beziehen),  dann m√ºssen im Vorgangsablauf mehrere Vorgangsschritte mit der gleichen Vorgangsposition angelegt werden. Der zweite und jeder weitere dieser Schritte wird dann als \&quot;Nachtrag\&quot; gekennzeichnet (Attribut &#x60;nachtrag: true&#x60;) 
   * @return nachtrag
   */
  @javax.annotation.Nonnull
  public Boolean getNachtrag() {
    return nachtrag;
  }

  public void setNachtrag(@javax.annotation.Nonnull Boolean nachtrag) {
    this.nachtrag = nachtrag;
  }


  public Vorgangsposition vorgangstyp(@javax.annotation.Nonnull String vorgangstyp) {
    this.vorgangstyp = vorgangstyp;
    return this;
  }

  /**
   * Vorgangstyp des zugeh√∂rigen Vorgangs
   * @return vorgangstyp
   */
  @javax.annotation.Nonnull
  public String getVorgangstyp() {
    return vorgangstyp;
  }

  public void setVorgangstyp(@javax.annotation.Nonnull String vorgangstyp) {
    this.vorgangstyp = vorgangstyp;
  }


  public Vorgangsposition typ(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nonnull
  public TypEnum getTyp() {
    return typ;
  }

  public void setTyp(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
  }


  public Vorgangsposition titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Titel des zugeh√∂rigen Vorgangs
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public Vorgangsposition dokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
    return this;
  }

  /**
   * Get dokumentart
   * @return dokumentart
   */
  @javax.annotation.Nonnull
  public DokumentartEnum getDokumentart() {
    return dokumentart;
  }

  public void setDokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
  }


  public Vorgangsposition vorgangId(@javax.annotation.Nonnull String vorgangId) {
    this.vorgangId = vorgangId;
    return this;
  }

  /**
   * ID des zugeh√∂rigen Vorgangs
   * @return vorgangId
   */
  @javax.annotation.Nonnull
  public String getVorgangId() {
    return vorgangId;
  }

  public void setVorgangId(@javax.annotation.Nonnull String vorgangId) {
    this.vorgangId = vorgangId;
  }


  public Vorgangsposition datum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
    return this;
  }

  /**
   * Datum des zugeh√∂rigen Dokuments
   * @return datum
   */
  @javax.annotation.Nonnull
  public LocalDate getDatum() {
    return datum;
  }

  public void setDatum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
  }


  public Vorgangsposition aktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
    return this;
  }

  /**
   * Letzte Aktualisierung der Entit√§t oder des zugeh√∂rigen Dokuments
   * @return aktualisiert
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAktualisiert() {
    return aktualisiert;
  }

  public void setAktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
  }


  public Vorgangsposition fundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
    return this;
  }

  /**
   * Get fundstelle
   * @return fundstelle
   */
  @javax.annotation.Nonnull
  public Fundstelle getFundstelle() {
    return fundstelle;
  }

  public void setFundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
  }


  public Vorgangsposition urheber(@javax.annotation.Nullable List<Urheber> urheber) {
    this.urheber = urheber;
    return this;
  }

  public Vorgangsposition addUrheberItem(Urheber urheberItem) {
    if (this.urheber == null) {
      this.urheber = new ArrayList<>();
    }
    this.urheber.add(urheberItem);
    return this;
  }

  /**
   * Get urheber
   * @return urheber
   */
  @javax.annotation.Nullable
  public List<Urheber> getUrheber() {
    return urheber;
  }

  public void setUrheber(@javax.annotation.Nullable List<Urheber> urheber) {
    this.urheber = urheber;
  }


  public Vorgangsposition ueberweisung(@javax.annotation.Nullable List<Ueberweisung> ueberweisung) {
    this.ueberweisung = ueberweisung;
    return this;
  }

  public Vorgangsposition addUeberweisungItem(Ueberweisung ueberweisungItem) {
    if (this.ueberweisung == null) {
      this.ueberweisung = new ArrayList<>();
    }
    this.ueberweisung.add(ueberweisungItem);
    return this;
  }

  /**
   * Get ueberweisung
   * @return ueberweisung
   */
  @javax.annotation.Nullable
  public List<Ueberweisung> getUeberweisung() {
    return ueberweisung;
  }

  public void setUeberweisung(@javax.annotation.Nullable List<Ueberweisung> ueberweisung) {
    this.ueberweisung = ueberweisung;
  }


  public Vorgangsposition aktivitaetAnzeige(@javax.annotation.Nullable List<AktivitaetAnzeige> aktivitaetAnzeige) {
    this.aktivitaetAnzeige = aktivitaetAnzeige;
    return this;
  }

  public Vorgangsposition addAktivitaetAnzeigeItem(AktivitaetAnzeige aktivitaetAnzeigeItem) {
    if (this.aktivitaetAnzeige == null) {
      this.aktivitaetAnzeige = new ArrayList<>();
    }
    this.aktivitaetAnzeige.add(aktivitaetAnzeigeItem);
    return this;
  }

  /**
   * Zusammenfassung der ersten 4 zur Anzeige vorgesehenen Aktivit√§ten
   * @return aktivitaetAnzeige
   */
  @javax.annotation.Nullable
  public List<AktivitaetAnzeige> getAktivitaetAnzeige() {
    return aktivitaetAnzeige;
  }

  public void setAktivitaetAnzeige(@javax.annotation.Nullable List<AktivitaetAnzeige> aktivitaetAnzeige) {
    this.aktivitaetAnzeige = aktivitaetAnzeige;
  }


  public Vorgangsposition aktivitaetAnzahl(@javax.annotation.Nonnull Integer aktivitaetAnzahl) {
    this.aktivitaetAnzahl = aktivitaetAnzahl;
    return this;
  }

  /**
   * Gesamtzahl der zugeh√∂rigen Aktivit√§ten
   * @return aktivitaetAnzahl
   */
  @javax.annotation.Nonnull
  public Integer getAktivitaetAnzahl() {
    return aktivitaetAnzahl;
  }

  public void setAktivitaetAnzahl(@javax.annotation.Nonnull Integer aktivitaetAnzahl) {
    this.aktivitaetAnzahl = aktivitaetAnzahl;
  }


  public Vorgangsposition ressort(@javax.annotation.Nullable List<Ressort> ressort) {
    this.ressort = ressort;
    return this;
  }

  public Vorgangsposition addRessortItem(Ressort ressortItem) {
    if (this.ressort == null) {
      this.ressort = new ArrayList<>();
    }
    this.ressort.add(ressortItem);
    return this;
  }

  /**
   * Get ressort
   * @return ressort
   */
  @javax.annotation.Nullable
  public List<Ressort> getRessort() {
    return ressort;
  }

  public void setRessort(@javax.annotation.Nullable List<Ressort> ressort) {
    this.ressort = ressort;
  }


  public Vorgangsposition beschlussfassung(@javax.annotation.Nullable List<Beschlussfassung> beschlussfassung) {
    this.beschlussfassung = beschlussfassung;
    return this;
  }

  public Vorgangsposition addBeschlussfassungItem(Beschlussfassung beschlussfassungItem) {
    if (this.beschlussfassung == null) {
      this.beschlussfassung = new ArrayList<>();
    }
    this.beschlussfassung.add(beschlussfassungItem);
    return this;
  }

  /**
   * Get beschlussfassung
   * @return beschlussfassung
   */
  @javax.annotation.Nullable
  public List<Beschlussfassung> getBeschlussfassung() {
    return beschlussfassung;
  }

  public void setBeschlussfassung(@javax.annotation.Nullable List<Beschlussfassung> beschlussfassung) {
    this.beschlussfassung = beschlussfassung;
  }


  public Vorgangsposition ratsdok(@javax.annotation.Nullable String ratsdok) {
    this.ratsdok = ratsdok;
    return this;
  }

  /**
   * Ratsdok-Nr.
   * @return ratsdok
   */
  @javax.annotation.Nullable
  public String getRatsdok() {
    return ratsdok;
  }

  public void setRatsdok(@javax.annotation.Nullable String ratsdok) {
    this.ratsdok = ratsdok;
  }


  public Vorgangsposition kom(@javax.annotation.Nullable String kom) {
    this.kom = kom;
    return this;
  }

  /**
   * KOM-Nr.
   * @return kom
   */
  @javax.annotation.Nullable
  public String getKom() {
    return kom;
  }

  public void setKom(@javax.annotation.Nullable String kom) {
    this.kom = kom;
  }


  public Vorgangsposition sek(@javax.annotation.Nullable String sek) {
    this.sek = sek;
    return this;
  }

  /**
   * SEK-Nr.
   * @return sek
   */
  @javax.annotation.Nullable
  public String getSek() {
    return sek;
  }

  public void setSek(@javax.annotation.Nullable String sek) {
    this.sek = sek;
  }


  public Vorgangsposition mitberaten(@javax.annotation.Nullable List<Vorgangspositionbezug> mitberaten) {
    this.mitberaten = mitberaten;
    return this;
  }

  public Vorgangsposition addMitberatenItem(Vorgangspositionbezug mitberatenItem) {
    if (this.mitberaten == null) {
      this.mitberaten = new ArrayList<>();
    }
    this.mitberaten.add(mitberatenItem);
    return this;
  }

  /**
   * Es ist eine h√§ufig ge√ºbte Praxis, mehrere thematisch verwandte Vorlagen (z.B. konkurrierende Antr√§ge der verschiedenen Fraktionen zum Thema Diesel-Fahrverbote) in einer Debatte gemeinsam zu beraten (\&quot;Zusammenberatung\&quot;).  &#x60;mitberaten&#x60; liefert, von einem Vorgang ausgehend, alle anderen Vorg√§nge, die Gegenstand der Zusammenberatung sind. 
   * @return mitberaten
   */
  @javax.annotation.Nullable
  public List<Vorgangspositionbezug> getMitberaten() {
    return mitberaten;
  }

  public void setMitberaten(@javax.annotation.Nullable List<Vorgangspositionbezug> mitberaten) {
    this.mitberaten = mitberaten;
  }


  public Vorgangsposition _abstract(@javax.annotation.Nullable String _abstract) {
    this._abstract = _abstract;
    return this;
  }

  /**
   * Get _abstract
   * @return _abstract
   */
  @javax.annotation.Nullable
  public String getAbstract() {
    return _abstract;
  }

  public void setAbstract(@javax.annotation.Nullable String _abstract) {
    this._abstract = _abstract;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vorgangsposition vorgangsposition = (Vorgangsposition) o;
    return Objects.equals(this.id, vorgangsposition.id) &&
        Objects.equals(this.vorgangsposition, vorgangsposition.vorgangsposition) &&
        Objects.equals(this.zuordnung, vorgangsposition.zuordnung) &&
        Objects.equals(this.gang, vorgangsposition.gang) &&
        Objects.equals(this.fortsetzung, vorgangsposition.fortsetzung) &&
        Objects.equals(this.nachtrag, vorgangsposition.nachtrag) &&
        Objects.equals(this.vorgangstyp, vorgangsposition.vorgangstyp) &&
        Objects.equals(this.typ, vorgangsposition.typ) &&
        Objects.equals(this.titel, vorgangsposition.titel) &&
        Objects.equals(this.dokumentart, vorgangsposition.dokumentart) &&
        Objects.equals(this.vorgangId, vorgangsposition.vorgangId) &&
        Objects.equals(this.datum, vorgangsposition.datum) &&
        Objects.equals(this.aktualisiert, vorgangsposition.aktualisiert) &&
        Objects.equals(this.fundstelle, vorgangsposition.fundstelle) &&
        Objects.equals(this.urheber, vorgangsposition.urheber) &&
        Objects.equals(this.ueberweisung, vorgangsposition.ueberweisung) &&
        Objects.equals(this.aktivitaetAnzeige, vorgangsposition.aktivitaetAnzeige) &&
        Objects.equals(this.aktivitaetAnzahl, vorgangsposition.aktivitaetAnzahl) &&
        Objects.equals(this.ressort, vorgangsposition.ressort) &&
        Objects.equals(this.beschlussfassung, vorgangsposition.beschlussfassung) &&
        Objects.equals(this.ratsdok, vorgangsposition.ratsdok) &&
        Objects.equals(this.kom, vorgangsposition.kom) &&
        Objects.equals(this.sek, vorgangsposition.sek) &&
        Objects.equals(this.mitberaten, vorgangsposition.mitberaten) &&
        Objects.equals(this._abstract, vorgangsposition._abstract);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, vorgangsposition, zuordnung, gang, fortsetzung, nachtrag, vorgangstyp, typ, titel, dokumentart, vorgangId, datum, aktualisiert, fundstelle, urheber, ueberweisung, aktivitaetAnzeige, aktivitaetAnzahl, ressort, beschlussfassung, ratsdok, kom, sek, mitberaten, _abstract);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vorgangsposition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    vorgangsposition: ").append(toIndentedString(vorgangsposition)).append("\n");
    sb.append("    zuordnung: ").append(toIndentedString(zuordnung)).append("\n");
    sb.append("    gang: ").append(toIndentedString(gang)).append("\n");
    sb.append("    fortsetzung: ").append(toIndentedString(fortsetzung)).append("\n");
    sb.append("    nachtrag: ").append(toIndentedString(nachtrag)).append("\n");
    sb.append("    vorgangstyp: ").append(toIndentedString(vorgangstyp)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    dokumentart: ").append(toIndentedString(dokumentart)).append("\n");
    sb.append("    vorgangId: ").append(toIndentedString(vorgangId)).append("\n");
    sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
    sb.append("    aktualisiert: ").append(toIndentedString(aktualisiert)).append("\n");
    sb.append("    fundstelle: ").append(toIndentedString(fundstelle)).append("\n");
    sb.append("    urheber: ").append(toIndentedString(urheber)).append("\n");
    sb.append("    ueberweisung: ").append(toIndentedString(ueberweisung)).append("\n");
    sb.append("    aktivitaetAnzeige: ").append(toIndentedString(aktivitaetAnzeige)).append("\n");
    sb.append("    aktivitaetAnzahl: ").append(toIndentedString(aktivitaetAnzahl)).append("\n");
    sb.append("    ressort: ").append(toIndentedString(ressort)).append("\n");
    sb.append("    beschlussfassung: ").append(toIndentedString(beschlussfassung)).append("\n");
    sb.append("    ratsdok: ").append(toIndentedString(ratsdok)).append("\n");
    sb.append("    kom: ").append(toIndentedString(kom)).append("\n");
    sb.append("    sek: ").append(toIndentedString(sek)).append("\n");
    sb.append("    mitberaten: ").append(toIndentedString(mitberaten)).append("\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("vorgangsposition");
    openapiFields.add("zuordnung");
    openapiFields.add("gang");
    openapiFields.add("fortsetzung");
    openapiFields.add("nachtrag");
    openapiFields.add("vorgangstyp");
    openapiFields.add("typ");
    openapiFields.add("titel");
    openapiFields.add("dokumentart");
    openapiFields.add("vorgang_id");
    openapiFields.add("datum");
    openapiFields.add("aktualisiert");
    openapiFields.add("fundstelle");
    openapiFields.add("urheber");
    openapiFields.add("ueberweisung");
    openapiFields.add("aktivitaet_anzeige");
    openapiFields.add("aktivitaet_anzahl");
    openapiFields.add("ressort");
    openapiFields.add("beschlussfassung");
    openapiFields.add("ratsdok");
    openapiFields.add("kom");
    openapiFields.add("sek");
    openapiFields.add("mitberaten");
    openapiFields.add("abstract");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("vorgangsposition");
    openapiRequiredFields.add("zuordnung");
    openapiRequiredFields.add("gang");
    openapiRequiredFields.add("fortsetzung");
    openapiRequiredFields.add("nachtrag");
    openapiRequiredFields.add("vorgangstyp");
    openapiRequiredFields.add("typ");
    openapiRequiredFields.add("titel");
    openapiRequiredFields.add("dokumentart");
    openapiRequiredFields.add("vorgang_id");
    openapiRequiredFields.add("datum");
    openapiRequiredFields.add("aktualisiert");
    openapiRequiredFields.add("fundstelle");
    openapiRequiredFields.add("aktivitaet_anzahl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vorgangsposition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vorgangsposition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vorgangsposition is not found in the empty JSON string", Vorgangsposition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vorgangsposition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vorgangsposition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vorgangsposition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("vorgangsposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorgangsposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorgangsposition").toString()));
      }
      // validate the required field `zuordnung`
      Zuordnung.validateJsonElement(jsonObj.get("zuordnung"));
      if (!jsonObj.get("vorgangstyp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorgangstyp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorgangstyp").toString()));
      }
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      // validate the required field `typ`
      TypEnum.validateJsonElement(jsonObj.get("typ"));
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if (!jsonObj.get("dokumentart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentart").toString()));
      }
      // validate the required field `dokumentart`
      DokumentartEnum.validateJsonElement(jsonObj.get("dokumentart"));
      if (!jsonObj.get("vorgang_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorgang_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorgang_id").toString()));
      }
      // validate the required field `fundstelle`
      Fundstelle.validateJsonElement(jsonObj.get("fundstelle"));
      if (jsonObj.get("urheber") != null && !jsonObj.get("urheber").isJsonNull()) {
        JsonArray jsonArrayurheber = jsonObj.getAsJsonArray("urheber");
        if (jsonArrayurheber != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urheber").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urheber` to be an array in the JSON string but got `%s`", jsonObj.get("urheber").toString()));
          }

          // validate the optional field `urheber` (array)
          for (int i = 0; i < jsonArrayurheber.size(); i++) {
            Urheber.validateJsonElement(jsonArrayurheber.get(i));
          };
        }
      }
      if (jsonObj.get("ueberweisung") != null && !jsonObj.get("ueberweisung").isJsonNull()) {
        JsonArray jsonArrayueberweisung = jsonObj.getAsJsonArray("ueberweisung");
        if (jsonArrayueberweisung != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ueberweisung").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ueberweisung` to be an array in the JSON string but got `%s`", jsonObj.get("ueberweisung").toString()));
          }

          // validate the optional field `ueberweisung` (array)
          for (int i = 0; i < jsonArrayueberweisung.size(); i++) {
            Ueberweisung.validateJsonElement(jsonArrayueberweisung.get(i));
          };
        }
      }
      if (jsonObj.get("aktivitaet_anzeige") != null && !jsonObj.get("aktivitaet_anzeige").isJsonNull()) {
        JsonArray jsonArrayaktivitaetAnzeige = jsonObj.getAsJsonArray("aktivitaet_anzeige");
        if (jsonArrayaktivitaetAnzeige != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aktivitaet_anzeige").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aktivitaet_anzeige` to be an array in the JSON string but got `%s`", jsonObj.get("aktivitaet_anzeige").toString()));
          }

          // validate the optional field `aktivitaet_anzeige` (array)
          for (int i = 0; i < jsonArrayaktivitaetAnzeige.size(); i++) {
            AktivitaetAnzeige.validateJsonElement(jsonArrayaktivitaetAnzeige.get(i));
          };
        }
      }
      if (jsonObj.get("ressort") != null && !jsonObj.get("ressort").isJsonNull()) {
        JsonArray jsonArrayressort = jsonObj.getAsJsonArray("ressort");
        if (jsonArrayressort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ressort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ressort` to be an array in the JSON string but got `%s`", jsonObj.get("ressort").toString()));
          }

          // validate the optional field `ressort` (array)
          for (int i = 0; i < jsonArrayressort.size(); i++) {
            Ressort.validateJsonElement(jsonArrayressort.get(i));
          };
        }
      }
      if (jsonObj.get("beschlussfassung") != null && !jsonObj.get("beschlussfassung").isJsonNull()) {
        JsonArray jsonArraybeschlussfassung = jsonObj.getAsJsonArray("beschlussfassung");
        if (jsonArraybeschlussfassung != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beschlussfassung").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beschlussfassung` to be an array in the JSON string but got `%s`", jsonObj.get("beschlussfassung").toString()));
          }

          // validate the optional field `beschlussfassung` (array)
          for (int i = 0; i < jsonArraybeschlussfassung.size(); i++) {
            Beschlussfassung.validateJsonElement(jsonArraybeschlussfassung.get(i));
          };
        }
      }
      if ((jsonObj.get("ratsdok") != null && !jsonObj.get("ratsdok").isJsonNull()) && !jsonObj.get("ratsdok").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratsdok` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratsdok").toString()));
      }
      if ((jsonObj.get("kom") != null && !jsonObj.get("kom").isJsonNull()) && !jsonObj.get("kom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kom").toString()));
      }
      if ((jsonObj.get("sek") != null && !jsonObj.get("sek").isJsonNull()) && !jsonObj.get("sek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sek").toString()));
      }
      if (jsonObj.get("mitberaten") != null && !jsonObj.get("mitberaten").isJsonNull()) {
        JsonArray jsonArraymitberaten = jsonObj.getAsJsonArray("mitberaten");
        if (jsonArraymitberaten != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mitberaten").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mitberaten` to be an array in the JSON string but got `%s`", jsonObj.get("mitberaten").toString()));
          }

          // validate the optional field `mitberaten` (array)
          for (int i = 0; i < jsonArraymitberaten.size(); i++) {
            Vorgangspositionbezug.validateJsonElement(jsonArraymitberaten.get(i));
          };
        }
      }
      if ((jsonObj.get("abstract") != null && !jsonObj.get("abstract").isJsonNull()) && !jsonObj.get("abstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstract").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vorgangsposition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vorgangsposition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vorgangsposition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vorgangsposition.class));

       return (TypeAdapter<T>) new TypeAdapter<Vorgangsposition>() {
           @Override
           public void write(JsonWriter out, Vorgangsposition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vorgangsposition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vorgangsposition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vorgangsposition
   * @throws IOException if the JSON string is invalid with respect to Vorgangsposition
   */
  public static Vorgangsposition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vorgangsposition.class);
  }

  /**
   * Convert an instance of Vorgangsposition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

