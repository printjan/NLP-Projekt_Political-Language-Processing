/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Verlinkte Verweisung von einem Vorgang auf einen anderen Vorgang, zu dem eine besondere inhaltliche Verbindung besteht.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class VorgangVerlinkung {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_VERWEISUNG = "verweisung";
  @SerializedName(SERIALIZED_NAME_VERWEISUNG)
  @javax.annotation.Nonnull
  private String verweisung;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_WAHLPERIODE = "wahlperiode";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE)
  @javax.annotation.Nonnull
  private Integer wahlperiode;

  public static final String SERIALIZED_NAME_GESTA = "gesta";
  @SerializedName(SERIALIZED_NAME_GESTA)
  @javax.annotation.Nullable
  private String gesta;

  public VorgangVerlinkung() {
  }

  public VorgangVerlinkung id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * ID eines verknüpften Vorgangs
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public VorgangVerlinkung verweisung(@javax.annotation.Nonnull String verweisung) {
    this.verweisung = verweisung;
    return this;
  }

  /**
   * Get verweisung
   * @return verweisung
   */
  @javax.annotation.Nonnull
  public String getVerweisung() {
    return verweisung;
  }

  public void setVerweisung(@javax.annotation.Nonnull String verweisung) {
    this.verweisung = verweisung;
  }


  public VorgangVerlinkung titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public VorgangVerlinkung wahlperiode(@javax.annotation.Nonnull Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
    return this;
  }

  /**
   * Get wahlperiode
   * @return wahlperiode
   */
  @javax.annotation.Nonnull
  public Integer getWahlperiode() {
    return wahlperiode;
  }

  public void setWahlperiode(@javax.annotation.Nonnull Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
  }


  public VorgangVerlinkung gesta(@javax.annotation.Nullable String gesta) {
    this.gesta = gesta;
    return this;
  }

  /**
   * Get gesta
   * @return gesta
   */
  @javax.annotation.Nullable
  public String getGesta() {
    return gesta;
  }

  public void setGesta(@javax.annotation.Nullable String gesta) {
    this.gesta = gesta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VorgangVerlinkung vorgangVerlinkung = (VorgangVerlinkung) o;
    return Objects.equals(this.id, vorgangVerlinkung.id) &&
        Objects.equals(this.verweisung, vorgangVerlinkung.verweisung) &&
        Objects.equals(this.titel, vorgangVerlinkung.titel) &&
        Objects.equals(this.wahlperiode, vorgangVerlinkung.wahlperiode) &&
        Objects.equals(this.gesta, vorgangVerlinkung.gesta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, verweisung, titel, wahlperiode, gesta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VorgangVerlinkung {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    verweisung: ").append(toIndentedString(verweisung)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    wahlperiode: ").append(toIndentedString(wahlperiode)).append("\n");
    sb.append("    gesta: ").append(toIndentedString(gesta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("verweisung");
    openapiFields.add("titel");
    openapiFields.add("wahlperiode");
    openapiFields.add("gesta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("verweisung");
    openapiRequiredFields.add("titel");
    openapiRequiredFields.add("wahlperiode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VorgangVerlinkung
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VorgangVerlinkung.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VorgangVerlinkung is not found in the empty JSON string", VorgangVerlinkung.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VorgangVerlinkung.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VorgangVerlinkung` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VorgangVerlinkung.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("verweisung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verweisung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verweisung").toString()));
      }
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if ((jsonObj.get("gesta") != null && !jsonObj.get("gesta").isJsonNull()) && !jsonObj.get("gesta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gesta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gesta").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VorgangVerlinkung.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VorgangVerlinkung' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VorgangVerlinkung> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VorgangVerlinkung.class));

       return (TypeAdapter<T>) new TypeAdapter<VorgangVerlinkung>() {
           @Override
           public void write(JsonWriter out, VorgangVerlinkung value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VorgangVerlinkung read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VorgangVerlinkung given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VorgangVerlinkung
   * @throws IOException if the JSON string is invalid with respect to VorgangVerlinkung
   */
  public static VorgangVerlinkung fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VorgangVerlinkung.class);
  }

  /**
   * Convert an instance of VorgangVerlinkung to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

