/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert ID, Titel und Vorgangstyp eines Vorgangs, der mit der Drucksache oder dem Plenarprotokoll verbunden ist.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Vorgangsbezug {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_VORGANGSTYP = "vorgangstyp";
  @SerializedName(SERIALIZED_NAME_VORGANGSTYP)
  @javax.annotation.Nonnull
  private String vorgangstyp;

  public Vorgangsbezug() {
  }

  public Vorgangsbezug id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * ID eines verknüpften Vorgangs
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Vorgangsbezug titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public Vorgangsbezug vorgangstyp(@javax.annotation.Nonnull String vorgangstyp) {
    this.vorgangstyp = vorgangstyp;
    return this;
  }

  /**
   * Get vorgangstyp
   * @return vorgangstyp
   */
  @javax.annotation.Nonnull
  public String getVorgangstyp() {
    return vorgangstyp;
  }

  public void setVorgangstyp(@javax.annotation.Nonnull String vorgangstyp) {
    this.vorgangstyp = vorgangstyp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vorgangsbezug vorgangsbezug = (Vorgangsbezug) o;
    return Objects.equals(this.id, vorgangsbezug.id) &&
        Objects.equals(this.titel, vorgangsbezug.titel) &&
        Objects.equals(this.vorgangstyp, vorgangsbezug.vorgangstyp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, titel, vorgangstyp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vorgangsbezug {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    vorgangstyp: ").append(toIndentedString(vorgangstyp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("titel");
    openapiFields.add("vorgangstyp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("titel");
    openapiRequiredFields.add("vorgangstyp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vorgangsbezug
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vorgangsbezug.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vorgangsbezug is not found in the empty JSON string", Vorgangsbezug.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vorgangsbezug.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vorgangsbezug` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vorgangsbezug.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if (!jsonObj.get("vorgangstyp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorgangstyp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorgangstyp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vorgangsbezug.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vorgangsbezug' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vorgangsbezug> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vorgangsbezug.class));

       return (TypeAdapter<T>) new TypeAdapter<Vorgangsbezug>() {
           @Override
           public void write(JsonWriter out, Vorgangsbezug value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vorgangsbezug read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vorgangsbezug given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vorgangsbezug
   * @throws IOException if the JSON string is invalid with respect to Vorgangsbezug
   */
  public static Vorgangsbezug fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vorgangsbezug.class);
  }

  /**
   * Convert an instance of Vorgangsbezug to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

