/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert den Ausschuss bzw. die Ausschüsse, an die eine Drucksache überwiesen wurde, unter Angabe der Federführung und ggf. der Überweisungsart (z. B. „gemäß § 96 Geschäftsordnung BT“).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Ueberweisung {
  public static final String SERIALIZED_NAME_AUSSCHUSS = "ausschuss";
  @SerializedName(SERIALIZED_NAME_AUSSCHUSS)
  @javax.annotation.Nonnull
  private String ausschuss;

  public static final String SERIALIZED_NAME_AUSSCHUSS_KUERZEL = "ausschuss_kuerzel";
  @SerializedName(SERIALIZED_NAME_AUSSCHUSS_KUERZEL)
  @javax.annotation.Nonnull
  private String ausschussKuerzel;

  public static final String SERIALIZED_NAME_FEDERFUEHRUNG = "federfuehrung";
  @SerializedName(SERIALIZED_NAME_FEDERFUEHRUNG)
  @javax.annotation.Nonnull
  private Boolean federfuehrung;

  public static final String SERIALIZED_NAME_UEBERWEISUNGSART = "ueberweisungsart";
  @SerializedName(SERIALIZED_NAME_UEBERWEISUNGSART)
  @javax.annotation.Nullable
  private String ueberweisungsart;

  public Ueberweisung() {
  }

  public Ueberweisung ausschuss(@javax.annotation.Nonnull String ausschuss) {
    this.ausschuss = ausschuss;
    return this;
  }

  /**
   * Get ausschuss
   * @return ausschuss
   */
  @javax.annotation.Nonnull
  public String getAusschuss() {
    return ausschuss;
  }

  public void setAusschuss(@javax.annotation.Nonnull String ausschuss) {
    this.ausschuss = ausschuss;
  }


  public Ueberweisung ausschussKuerzel(@javax.annotation.Nonnull String ausschussKuerzel) {
    this.ausschussKuerzel = ausschussKuerzel;
    return this;
  }

  /**
   * Get ausschussKuerzel
   * @return ausschussKuerzel
   */
  @javax.annotation.Nonnull
  public String getAusschussKuerzel() {
    return ausschussKuerzel;
  }

  public void setAusschussKuerzel(@javax.annotation.Nonnull String ausschussKuerzel) {
    this.ausschussKuerzel = ausschussKuerzel;
  }


  public Ueberweisung federfuehrung(@javax.annotation.Nonnull Boolean federfuehrung) {
    this.federfuehrung = federfuehrung;
    return this;
  }

  /**
   * Get federfuehrung
   * @return federfuehrung
   */
  @javax.annotation.Nonnull
  public Boolean getFederfuehrung() {
    return federfuehrung;
  }

  public void setFederfuehrung(@javax.annotation.Nonnull Boolean federfuehrung) {
    this.federfuehrung = federfuehrung;
  }


  public Ueberweisung ueberweisungsart(@javax.annotation.Nullable String ueberweisungsart) {
    this.ueberweisungsart = ueberweisungsart;
    return this;
  }

  /**
   * Get ueberweisungsart
   * @return ueberweisungsart
   */
  @javax.annotation.Nullable
  public String getUeberweisungsart() {
    return ueberweisungsart;
  }

  public void setUeberweisungsart(@javax.annotation.Nullable String ueberweisungsart) {
    this.ueberweisungsart = ueberweisungsart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ueberweisung ueberweisung = (Ueberweisung) o;
    return Objects.equals(this.ausschuss, ueberweisung.ausschuss) &&
        Objects.equals(this.ausschussKuerzel, ueberweisung.ausschussKuerzel) &&
        Objects.equals(this.federfuehrung, ueberweisung.federfuehrung) &&
        Objects.equals(this.ueberweisungsart, ueberweisung.ueberweisungsart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ausschuss, ausschussKuerzel, federfuehrung, ueberweisungsart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ueberweisung {\n");
    sb.append("    ausschuss: ").append(toIndentedString(ausschuss)).append("\n");
    sb.append("    ausschussKuerzel: ").append(toIndentedString(ausschussKuerzel)).append("\n");
    sb.append("    federfuehrung: ").append(toIndentedString(federfuehrung)).append("\n");
    sb.append("    ueberweisungsart: ").append(toIndentedString(ueberweisungsart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ausschuss");
    openapiFields.add("ausschuss_kuerzel");
    openapiFields.add("federfuehrung");
    openapiFields.add("ueberweisungsart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ausschuss");
    openapiRequiredFields.add("ausschuss_kuerzel");
    openapiRequiredFields.add("federfuehrung");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ueberweisung
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ueberweisung.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ueberweisung is not found in the empty JSON string", Ueberweisung.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ueberweisung.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ueberweisung` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ueberweisung.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ausschuss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ausschuss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ausschuss").toString()));
      }
      if (!jsonObj.get("ausschuss_kuerzel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ausschuss_kuerzel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ausschuss_kuerzel").toString()));
      }
      if ((jsonObj.get("ueberweisungsart") != null && !jsonObj.get("ueberweisungsart").isJsonNull()) && !jsonObj.get("ueberweisungsart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ueberweisungsart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ueberweisungsart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ueberweisung.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ueberweisung' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ueberweisung> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ueberweisung.class));

       return (TypeAdapter<T>) new TypeAdapter<Ueberweisung>() {
           @Override
           public void write(JsonWriter out, Ueberweisung value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ueberweisung read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ueberweisung given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ueberweisung
   * @throws IOException if the JSON string is invalid with respect to Ueberweisung
   */
  public static Ueberweisung fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ueberweisung.class);
  }

  /**
   * Convert an instance of Ueberweisung to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

