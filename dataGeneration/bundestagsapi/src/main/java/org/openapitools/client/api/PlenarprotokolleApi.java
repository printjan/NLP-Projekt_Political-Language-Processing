/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.openapitools.client.model.GetVorgang404Response;
import org.openapitools.client.model.GetVorgangList400Response;
import org.openapitools.client.model.GetVorgangList401Response;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Plenarprotokoll;
import org.openapitools.client.model.PlenarprotokollListResponse;
import org.openapitools.client.model.PlenarprotokollText;
import org.openapitools.client.model.PlenarprotokollTextListResponse;
import org.openapitools.client.model.Zuordnung;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlenarprotokolleApi {
	private ApiClient localVarApiClient;
	private int localHostIndex;
	private String localCustomBaseUrl;

	public PlenarprotokolleApi() {
		this(Configuration.getDefaultApiClient());
	}

	public PlenarprotokolleApi(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return localVarApiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.localVarApiClient = apiClient;
	}

	public int getHostIndex() {
		return localHostIndex;
	}

	public void setHostIndex(int hostIndex) {
		this.localHostIndex = hostIndex;
	}

	public String getCustomBaseUrl() {
		return localCustomBaseUrl;
	}

	public void setCustomBaseUrl(String customBaseUrl) {
		this.localCustomBaseUrl = customBaseUrl;
	}

	/**
	 * Build call for getPlenarprotokoll
	 *
	 * @param id        (required)
	 * @param format    Steuert das Datenformat der Antwort, möglich sind JSON
	 *                  (voreingestellt) oder XML. (optional, default to json)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollCall(Integer id, String format, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/plenarprotokoll/{id}"
				.replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (format != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
		}

		final String[] localVarAccepts = {
				"application/json",
				"application/xml"
		};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams,
				localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getPlenarprotokollValidateBeforeCall(Integer id, String format, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling getPlenarprotokoll(Async)");
		}

		return getPlenarprotokollCall(id, format, _callback);

	}

	/**
	 * Liefert Metadaten zu einem Plenarprotokoll
	 *
	 * @param id     (required)
	 * @param format Steuert das Datenformat der Antwort, möglich sind JSON
	 *               (voreingestellt) oder XML. (optional, default to json)
	 * @return Plenarprotokoll
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public Plenarprotokoll getPlenarprotokoll(Integer id, String format) throws ApiException {
		ApiResponse<Plenarprotokoll> localVarResp = getPlenarprotokollWithHttpInfo(id, format);
		return localVarResp.getData();
	}

	/**
	 * Liefert Metadaten zu einem Plenarprotokoll
	 *
	 * @param id     (required)
	 * @param format Steuert das Datenformat der Antwort, möglich sind JSON
	 *               (voreingestellt) oder XML. (optional, default to json)
	 * @return ApiResponse&lt;Plenarprotokoll&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public ApiResponse<Plenarprotokoll> getPlenarprotokollWithHttpInfo(Integer id, String format) throws ApiException {
		okhttp3.Call localVarCall = getPlenarprotokollValidateBeforeCall(id, format, null);
		Type localVarReturnType = new TypeToken<Plenarprotokoll>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Liefert Metadaten zu einem Plenarprotokoll (asynchronously)
	 *
	 * @param id        (required)
	 * @param format    Steuert das Datenformat der Antwort, möglich sind JSON
	 *                  (voreingestellt) oder XML. (optional, default to json)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollAsync(Integer id, String format, final ApiCallback<Plenarprotokoll> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getPlenarprotokollValidateBeforeCall(id, format, _callback);
		Type localVarReturnType = new TypeToken<Plenarprotokoll>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getPlenarprotokollList
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @param _callback            Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollListCall(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd,
			LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, List<Integer> fId,
			List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung,
			String cursor, String format, final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/plenarprotokoll";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (fAktualisiertStart != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.start", fAktualisiertStart));
		}

		if (fAktualisiertEnd != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.end", fAktualisiertEnd));
		}

		if (fDatumStart != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.start", fDatumStart));
		}

		if (fDatumEnd != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.end", fDatumEnd));
		}

		if (fDokumentnummer != null) {
			localVarCollectionQueryParams
					.addAll(localVarApiClient.parameterToPairs("multi", "f.dokumentnummer", fDokumentnummer));
		}

		if (fId != null) {
			localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.id", fId));
		}

		if (fVorgangstyp != null) {
			localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp", fVorgangstyp));
		}

		if (fVorgangstypNotation != null) {
			localVarCollectionQueryParams
					.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp_notation", fVorgangstypNotation));
		}

		if (fWahlperiode != null) {
			localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.wahlperiode", fWahlperiode));
		}

		if (fZuordnung != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.zuordnung", fZuordnung));
		}

		if (cursor != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
		}

		if (format != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
		}

		final String[] localVarAccepts = {
				"application/json",
				"application/xml"
		};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams,
				localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getPlenarprotokollListValidateBeforeCall(OffsetDateTime fAktualisiertStart,
			OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer,
			List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode,
			Zuordnung fZuordnung, String cursor, String format, final ApiCallback _callback) throws ApiException {
		return getPlenarprotokollListCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer,
				fId, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, _callback);

	}

	/**
	 * Liefert eine Liste von Metadaten zu Plenarprotokollen
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @return PlenarprotokollListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public PlenarprotokollListResponse getPlenarprotokollList(OffsetDateTime fAktualisiertStart,
			OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer,
			List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode,
			Zuordnung fZuordnung, String cursor, String format) throws ApiException {
		ApiResponse<PlenarprotokollListResponse> localVarResp = getPlenarprotokollListWithHttpInfo(fAktualisiertStart,
				fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fId, fVorgangstyp, fVorgangstypNotation,
				fWahlperiode, fZuordnung, cursor, format);
		return localVarResp.getData();
	}

	/**
	 * Liefert eine Liste von Metadaten zu Plenarprotokollen
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @return ApiResponse&lt;PlenarprotokollListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public ApiResponse<PlenarprotokollListResponse> getPlenarprotokollListWithHttpInfo(OffsetDateTime fAktualisiertStart,
			OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer,
			List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode,
			Zuordnung fZuordnung, String cursor, String format) throws ApiException {
		okhttp3.Call localVarCall = getPlenarprotokollListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd,
				fDatumStart, fDatumEnd, fDokumentnummer, fId, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung,
				cursor, format, null);
		Type localVarReturnType = new TypeToken<PlenarprotokollListResponse>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Liefert eine Liste von Metadaten zu Plenarprotokollen (asynchronously)
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @param _callback            The callback to be executed when the API call
	 *                             finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollListAsync(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd,
			LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, List<Integer> fId,
			List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung,
			String cursor, String format, final ApiCallback<PlenarprotokollListResponse> _callback) throws ApiException {

		okhttp3.Call localVarCall = getPlenarprotokollListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd,
				fDatumStart, fDatumEnd, fDokumentnummer, fId, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung,
				cursor, format, _callback);
		Type localVarReturnType = new TypeToken<PlenarprotokollListResponse>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getPlenarprotokollText
	 *
	 * @param id        (required)
	 * @param format    Steuert das Datenformat der Antwort, möglich sind JSON
	 *                  (voreingestellt) oder XML. (optional, default to json)
	 * @param _callback Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollTextCall(Integer id, String format, final ApiCallback _callback)
			throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/plenarprotokoll-text/{id}"
				.replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (format != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
		}

		final String[] localVarAccepts = {
				"application/json",
				"application/xml"
		};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams,
				localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getPlenarprotokollTextValidateBeforeCall(Integer id, String format, final ApiCallback _callback)
			throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling getPlenarprotokollText(Async)");
		}

		return getPlenarprotokollTextCall(id, format, _callback);

	}

	/**
	 * Liefert Volltext und Metadaten zu einem Plenarprotokoll
	 *
	 * @param id     (required)
	 * @param format Steuert das Datenformat der Antwort, möglich sind JSON
	 *               (voreingestellt) oder XML. (optional, default to json)
	 * @return PlenarprotokollText
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public PlenarprotokollText getPlenarprotokollText(Integer id, String format) throws ApiException {
		ApiResponse<PlenarprotokollText> localVarResp = getPlenarprotokollTextWithHttpInfo(id, format);
		return localVarResp.getData();
	}

	/**
	 * Liefert Volltext und Metadaten zu einem Plenarprotokoll
	 *
	 * @param id     (required)
	 * @param format Steuert das Datenformat der Antwort, möglich sind JSON
	 *               (voreingestellt) oder XML. (optional, default to json)
	 * @return ApiResponse&lt;PlenarprotokollText&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public ApiResponse<PlenarprotokollText> getPlenarprotokollTextWithHttpInfo(Integer id, String format)
			throws ApiException {
		okhttp3.Call localVarCall = getPlenarprotokollTextValidateBeforeCall(id, format, null);
		Type localVarReturnType = new TypeToken<PlenarprotokollText>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Liefert Volltext und Metadaten zu einem Plenarprotokoll (asynchronously)
	 *
	 * @param id        (required)
	 * @param format    Steuert das Datenformat der Antwort, möglich sind JSON
	 *                  (voreingestellt) oder XML. (optional, default to json)
	 * @param _callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten eines Plenarprotokolls</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>404</td>
	 *                        <td>Die angefragte Entität wurde nicht gefunden</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollTextAsync(Integer id, String format,
			final ApiCallback<PlenarprotokollText> _callback) throws ApiException {

		okhttp3.Call localVarCall = getPlenarprotokollTextValidateBeforeCall(id, format, _callback);
		Type localVarReturnType = new TypeToken<PlenarprotokollText>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}

	/**
	 * Build call for getPlenarprotokollTextList
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @param _callback            Callback for upload/download progress
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollTextListCall(OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd,
			LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer, List<Integer> fId,
			List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode, Zuordnung fZuordnung,
			String cursor, String format, final ApiCallback _callback) throws ApiException {
		String basePath = null;
		// Operation Servers
		String[] localBasePaths = new String[] {};

		// Determine Base Path to Use
		if (localCustomBaseUrl != null) {
			basePath = localCustomBaseUrl;
		} else if (localBasePaths.length > 0) {
			basePath = localBasePaths[localHostIndex];
		} else {
			basePath = null;
		}

		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/plenarprotokoll-text";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		Map<String, String> localVarHeaderParams = new HashMap<String, String>();
		Map<String, String> localVarCookieParams = new HashMap<String, String>();
		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		if (fAktualisiertStart != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.start", fAktualisiertStart));
		}

		if (fAktualisiertEnd != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.aktualisiert.end", fAktualisiertEnd));
		}

		if (fDatumStart != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.start", fDatumStart));
		}

		if (fDatumEnd != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.datum.end", fDatumEnd));
		}

		if (fDokumentnummer != null) {
			localVarCollectionQueryParams
					.addAll(localVarApiClient.parameterToPairs("multi", "f.dokumentnummer", fDokumentnummer));
		}

		if (fId != null) {
			localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.id", fId));
		}

		if (fVorgangstyp != null) {
			localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp", fVorgangstyp));
		}

		if (fVorgangstypNotation != null) {
			localVarCollectionQueryParams
					.addAll(localVarApiClient.parameterToPairs("multi", "f.vorgangstyp_notation", fVorgangstypNotation));
		}

		if (fWahlperiode != null) {
			localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "f.wahlperiode", fWahlperiode));
		}

		if (fZuordnung != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("f.zuordnung", fZuordnung));
		}

		if (cursor != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
		}

		if (format != null) {
			localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
		}

		final String[] localVarAccepts = {
				"application/json",
				"application/xml"
		};
		final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
		};
		final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
		if (localVarContentType != null) {
			localVarHeaderParams.put("Content-Type", localVarContentType);
		}

		String[] localVarAuthNames = new String[] { "ApiKeyHeader", "ApiKeyQuery" };
		return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
				localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams,
				localVarAuthNames, _callback);
	}

	@SuppressWarnings("rawtypes")
	private okhttp3.Call getPlenarprotokollTextListValidateBeforeCall(OffsetDateTime fAktualisiertStart,
			OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer,
			List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode,
			Zuordnung fZuordnung, String cursor, String format, final ApiCallback _callback) throws ApiException {
		return getPlenarprotokollTextListCall(fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer,
				fId, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format, _callback);

	}

	/**
	 * Liefert eine Liste von Volltexten und Metadaten zu Plenarprotokollen
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @return PlenarprotokollTextListResponse
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public PlenarprotokollTextListResponse getPlenarprotokollTextList(OffsetDateTime fAktualisiertStart,
			OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer,
			List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode,
			Zuordnung fZuordnung, String cursor, String format) throws ApiException {
		ApiResponse<PlenarprotokollTextListResponse> localVarResp = getPlenarprotokollTextListWithHttpInfo(
				fAktualisiertStart, fAktualisiertEnd, fDatumStart, fDatumEnd, fDokumentnummer, fId, fVorgangstyp,
				fVorgangstypNotation, fWahlperiode, fZuordnung, cursor, format);
		return localVarResp.getData();
	}

	/**
	 * Liefert eine Liste von Volltexten und Metadaten zu Plenarprotokollen
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @return ApiResponse&lt;PlenarprotokollTextListResponse&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public ApiResponse<PlenarprotokollTextListResponse> getPlenarprotokollTextListWithHttpInfo(
			OffsetDateTime fAktualisiertStart, OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd,
			List<String> fDokumentnummer, List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation,
			List<Integer> fWahlperiode, Zuordnung fZuordnung, String cursor, String format) throws ApiException {
		okhttp3.Call localVarCall = getPlenarprotokollTextListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd,
				fDatumStart, fDatumEnd, fDokumentnummer, fId, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung,
				cursor, format, null);
		Type localVarReturnType = new TypeToken<PlenarprotokollTextListResponse>() {
		}.getType();
		return localVarApiClient.execute(localVarCall, localVarReturnType);
	}

	/**
	 * Liefert eine Liste von Volltexten und Metadaten zu Plenarprotokollen
	 * (asynchronously)
	 *
	 * @param fAktualisiertStart   Frühestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fAktualisiertEnd     Spätestes Aktualisierungsdatum der Entität
	 *                             Selektiert Entitäten in einem Datumsbereich
	 *                             basierend auf dem letzten Aktualisierungsdatum.
	 *                             (optional)
	 * @param fDatumStart          Frühestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDatumEnd            Spätestes Datum der Entität Selektiert Entitäten
	 *                             in einem Datumsbereich basierend auf dem
	 *                             Dokumentdatum. Für Vorgänge und Personen wird der
	 *                             Datumsbereich aller zugehörigen Dokumente
	 *                             herangezogen. (optional)
	 * @param fDokumentnummer      Dokumentnummer einer Drucksache oder eines
	 *                             Plenarprotokolls Selektiert alle Entitäten, die
	 *                             mit der angegebenen Dokumentnummer verknüpft
	 *                             sind. Kann wiederholt werden, um mehrere
	 *                             Dokumentnummern zu selektieren. Hinterlegt ist
	 *                             eine ODER-Suche. (optional)
	 * @param fId                  ID der Entität Kann wiederholt werden, um mehrere
	 *                             Entitäten zu selektieren. (optional)
	 * @param fVorgangstyp         Vorgangstyp Selektiert alle Entitäten, die dem
	 *                             angegebenen Vorgangstyp zugeordnet sind. Kann
	 *                             wiederholt werden, um mehrere Vorgangstypen zu
	 *                             selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fVorgangstypNotation Vorgangstyp-Notation Selektiert alle Entitäten,
	 *                             die der angegebenen Vorgangstyp-Notation
	 *                             zugeordnet sind. Kann wiederholt werden, um
	 *                             mehrere Vorgangstypen zu selektieren. Hinterlegt
	 *                             ist eine ODER-Suche. (optional)
	 * @param fWahlperiode         Nummer der Wahlperiode Selektiert alle Entitäten,
	 *                             die der angegebenen Wahlperiode zugeordnet sind.
	 *                             Kann wiederholt werden, um mehrere Wahlperioden
	 *                             zu selektieren. Hinterlegt ist eine ODER-Suche.
	 *                             (optional)
	 * @param fZuordnung           Zuordnung der Entität zum Bundestag, Bundesrat,
	 *                             Bundesversammlung oder Europakammer (optional)
	 * @param cursor               Position des Cursors zur Anfrage weiterer
	 *                             Entitäten Übersteigt die Anzahl der gefundenen
	 *                             Entitäten das jeweilige Limit, muss eine
	 *                             Folgeanfrage gestellt werden, um weitere
	 *                             Entitäten zu laden. Eine Folgeanfrage wird
	 *                             gebildet, indem alle Parameter der ursprünglichen
	 *                             Anfrage wiederholt werden und zusätzlich der
	 *                             cursor Parameter der letzten Antwort eingesetzt
	 *                             wird. Es können solange Folgeanfragen gestellt
	 *                             werden, bis sich der cursor nicht mehr ändert.
	 *                             Dies signalisiert, dass alle Entitäten geladen
	 *                             wurden. (optional)
	 * @param format               Steuert das Datenformat der Antwort, möglich sind
	 *                             JSON (voreingestellt) oder XML. (optional,
	 *                             default to json)
	 * @param _callback            The callback to be executed when the API call
	 *                             finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 * @http.response.details
	 *                        <table border="1">
	 *                        <caption>Response Details</caption>
	 *                        <tr>
	 *                        <td>Status Code</td>
	 *                        <td>Description</td>
	 *                        <td>Response Headers</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>200</td>
	 *                        <td>Volltext und Metadaten zu Plenarprotokollen</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>400</td>
	 *                        <td>Syntaxfehler in einem der Anfrageparameter</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        <tr>
	 *                        <td>401</td>
	 *                        <td>Ein gültiger API-Key ist für alle Anfragen
	 *                        erforderlich. Dieser kann entweder im HTTP
	 *                        Authorization Header oder als Anfrageparameter apikey
	 *                        gesendet werden.</td>
	 *                        <td>-</td>
	 *                        </tr>
	 *                        </table>
	 */
	public okhttp3.Call getPlenarprotokollTextListAsync(OffsetDateTime fAktualisiertStart,
			OffsetDateTime fAktualisiertEnd, LocalDate fDatumStart, LocalDate fDatumEnd, List<String> fDokumentnummer,
			List<Integer> fId, List<String> fVorgangstyp, List<Integer> fVorgangstypNotation, List<Integer> fWahlperiode,
			Zuordnung fZuordnung, String cursor, String format, final ApiCallback<PlenarprotokollTextListResponse> _callback)
			throws ApiException {

		okhttp3.Call localVarCall = getPlenarprotokollTextListValidateBeforeCall(fAktualisiertStart, fAktualisiertEnd,
				fDatumStart, fDatumEnd, fDokumentnummer, fId, fVorgangstyp, fVorgangstypNotation, fWahlperiode, fZuordnung,
				cursor, format, _callback);
		Type localVarReturnType = new TypeToken<PlenarprotokollTextListResponse>() {
		}.getType();
		localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
		return localVarCall;
	}
}
