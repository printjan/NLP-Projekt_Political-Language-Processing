/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert die Beschlussfassung (z. B. Annahme, Ablehnung, Kenntnisnahme) zu einer Drucksache mit Fundstelle im Plenarprotokoll sowie Angaben zu ggf. erforderlichen qualifizierten Mehrheiten (&#x60;mehrheit&#x60;) bzw. der besonderen Abstimmungsverfahren (&#x60;abstimmungsart&#x60;).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Beschlussfassung {
  public static final String SERIALIZED_NAME_BESCHLUSSTENOR = "beschlusstenor";
  @SerializedName(SERIALIZED_NAME_BESCHLUSSTENOR)
  @javax.annotation.Nonnull
  private String beschlusstenor;

  public static final String SERIALIZED_NAME_SEITE = "seite";
  @SerializedName(SERIALIZED_NAME_SEITE)
  @javax.annotation.Nullable
  private String seite;

  /**
   * Gets or Sets abstimmungsart
   */
  @JsonAdapter(AbstimmungsartEnum.Adapter.class)
  public enum AbstimmungsartEnum {
    ABSTIMMUNG_DURCH_AUFRUF_DER_L_NDER("Abstimmung durch Aufruf der Länder"),
    
    GEHEIME_WAHL("Geheime Wahl"),
    
    HAMMELSPRUNG("Hammelsprung"),
    
    NAMENTLICHE_ABSTIMMUNG("Namentliche Abstimmung"),
    
    VERH_LTNISWAHL("Verhältniswahl");

    private String value;

    AbstimmungsartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AbstimmungsartEnum fromValue(String value) {
      for (AbstimmungsartEnum b : AbstimmungsartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AbstimmungsartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AbstimmungsartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AbstimmungsartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AbstimmungsartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AbstimmungsartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ABSTIMMUNGSART = "abstimmungsart";
  @SerializedName(SERIALIZED_NAME_ABSTIMMUNGSART)
  @javax.annotation.Nullable
  private AbstimmungsartEnum abstimmungsart;

  public static final String SERIALIZED_NAME_ABSTIMM_ERGEBNIS_BEMERKUNG = "abstimm_ergebnis_bemerkung";
  @SerializedName(SERIALIZED_NAME_ABSTIMM_ERGEBNIS_BEMERKUNG)
  @javax.annotation.Nullable
  private String abstimmErgebnisBemerkung;

  public static final String SERIALIZED_NAME_GRUNDLAGE = "grundlage";
  @SerializedName(SERIALIZED_NAME_GRUNDLAGE)
  @javax.annotation.Nullable
  private String grundlage;

  public static final String SERIALIZED_NAME_DOKUMENTNUMMER = "dokumentnummer";
  @SerializedName(SERIALIZED_NAME_DOKUMENTNUMMER)
  @javax.annotation.Nullable
  private String dokumentnummer;

  /**
   * Gets or Sets mehrheit
   */
  @JsonAdapter(MehrheitEnum.Adapter.class)
  public enum MehrheitEnum {
    ABSOLUTE_MEHRHEIT("Absolute Mehrheit"),
    
    ZWEIDRITTELMEHRHEIT("Zweidrittelmehrheit");

    private String value;

    MehrheitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MehrheitEnum fromValue(String value) {
      for (MehrheitEnum b : MehrheitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MehrheitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MehrheitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MehrheitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MehrheitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MehrheitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEHRHEIT = "mehrheit";
  @SerializedName(SERIALIZED_NAME_MEHRHEIT)
  @javax.annotation.Nullable
  private MehrheitEnum mehrheit;

  public Beschlussfassung() {
  }

  public Beschlussfassung beschlusstenor(@javax.annotation.Nonnull String beschlusstenor) {
    this.beschlusstenor = beschlusstenor;
    return this;
  }

  /**
   * Get beschlusstenor
   * @return beschlusstenor
   */
  @javax.annotation.Nonnull
  public String getBeschlusstenor() {
    return beschlusstenor;
  }

  public void setBeschlusstenor(@javax.annotation.Nonnull String beschlusstenor) {
    this.beschlusstenor = beschlusstenor;
  }


  public Beschlussfassung seite(@javax.annotation.Nullable String seite) {
    this.seite = seite;
    return this;
  }

  /**
   * Get seite
   * @return seite
   */
  @javax.annotation.Nullable
  public String getSeite() {
    return seite;
  }

  public void setSeite(@javax.annotation.Nullable String seite) {
    this.seite = seite;
  }


  public Beschlussfassung abstimmungsart(@javax.annotation.Nullable AbstimmungsartEnum abstimmungsart) {
    this.abstimmungsart = abstimmungsart;
    return this;
  }

  /**
   * Get abstimmungsart
   * @return abstimmungsart
   */
  @javax.annotation.Nullable
  public AbstimmungsartEnum getAbstimmungsart() {
    return abstimmungsart;
  }

  public void setAbstimmungsart(@javax.annotation.Nullable AbstimmungsartEnum abstimmungsart) {
    this.abstimmungsart = abstimmungsart;
  }


  public Beschlussfassung abstimmErgebnisBemerkung(@javax.annotation.Nullable String abstimmErgebnisBemerkung) {
    this.abstimmErgebnisBemerkung = abstimmErgebnisBemerkung;
    return this;
  }

  /**
   * Get abstimmErgebnisBemerkung
   * @return abstimmErgebnisBemerkung
   */
  @javax.annotation.Nullable
  public String getAbstimmErgebnisBemerkung() {
    return abstimmErgebnisBemerkung;
  }

  public void setAbstimmErgebnisBemerkung(@javax.annotation.Nullable String abstimmErgebnisBemerkung) {
    this.abstimmErgebnisBemerkung = abstimmErgebnisBemerkung;
  }


  public Beschlussfassung grundlage(@javax.annotation.Nullable String grundlage) {
    this.grundlage = grundlage;
    return this;
  }

  /**
   * Get grundlage
   * @return grundlage
   */
  @javax.annotation.Nullable
  public String getGrundlage() {
    return grundlage;
  }

  public void setGrundlage(@javax.annotation.Nullable String grundlage) {
    this.grundlage = grundlage;
  }


  public Beschlussfassung dokumentnummer(@javax.annotation.Nullable String dokumentnummer) {
    this.dokumentnummer = dokumentnummer;
    return this;
  }

  /**
   * Get dokumentnummer
   * @return dokumentnummer
   */
  @javax.annotation.Nullable
  public String getDokumentnummer() {
    return dokumentnummer;
  }

  public void setDokumentnummer(@javax.annotation.Nullable String dokumentnummer) {
    this.dokumentnummer = dokumentnummer;
  }


  public Beschlussfassung mehrheit(@javax.annotation.Nullable MehrheitEnum mehrheit) {
    this.mehrheit = mehrheit;
    return this;
  }

  /**
   * Get mehrheit
   * @return mehrheit
   */
  @javax.annotation.Nullable
  public MehrheitEnum getMehrheit() {
    return mehrheit;
  }

  public void setMehrheit(@javax.annotation.Nullable MehrheitEnum mehrheit) {
    this.mehrheit = mehrheit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Beschlussfassung beschlussfassung = (Beschlussfassung) o;
    return Objects.equals(this.beschlusstenor, beschlussfassung.beschlusstenor) &&
        Objects.equals(this.seite, beschlussfassung.seite) &&
        Objects.equals(this.abstimmungsart, beschlussfassung.abstimmungsart) &&
        Objects.equals(this.abstimmErgebnisBemerkung, beschlussfassung.abstimmErgebnisBemerkung) &&
        Objects.equals(this.grundlage, beschlussfassung.grundlage) &&
        Objects.equals(this.dokumentnummer, beschlussfassung.dokumentnummer) &&
        Objects.equals(this.mehrheit, beschlussfassung.mehrheit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beschlusstenor, seite, abstimmungsart, abstimmErgebnisBemerkung, grundlage, dokumentnummer, mehrheit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Beschlussfassung {\n");
    sb.append("    beschlusstenor: ").append(toIndentedString(beschlusstenor)).append("\n");
    sb.append("    seite: ").append(toIndentedString(seite)).append("\n");
    sb.append("    abstimmungsart: ").append(toIndentedString(abstimmungsart)).append("\n");
    sb.append("    abstimmErgebnisBemerkung: ").append(toIndentedString(abstimmErgebnisBemerkung)).append("\n");
    sb.append("    grundlage: ").append(toIndentedString(grundlage)).append("\n");
    sb.append("    dokumentnummer: ").append(toIndentedString(dokumentnummer)).append("\n");
    sb.append("    mehrheit: ").append(toIndentedString(mehrheit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beschlusstenor");
    openapiFields.add("seite");
    openapiFields.add("abstimmungsart");
    openapiFields.add("abstimm_ergebnis_bemerkung");
    openapiFields.add("grundlage");
    openapiFields.add("dokumentnummer");
    openapiFields.add("mehrheit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beschlusstenor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Beschlussfassung
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Beschlussfassung.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Beschlussfassung is not found in the empty JSON string", Beschlussfassung.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Beschlussfassung.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Beschlussfassung` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Beschlussfassung.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("beschlusstenor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beschlusstenor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beschlusstenor").toString()));
      }
      if ((jsonObj.get("seite") != null && !jsonObj.get("seite").isJsonNull()) && !jsonObj.get("seite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seite").toString()));
      }
      if ((jsonObj.get("abstimmungsart") != null && !jsonObj.get("abstimmungsart").isJsonNull()) && !jsonObj.get("abstimmungsart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstimmungsart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstimmungsart").toString()));
      }
      // validate the optional field `abstimmungsart`
      if (jsonObj.get("abstimmungsart") != null && !jsonObj.get("abstimmungsart").isJsonNull()) {
        AbstimmungsartEnum.validateJsonElement(jsonObj.get("abstimmungsart"));
      }
      if ((jsonObj.get("abstimm_ergebnis_bemerkung") != null && !jsonObj.get("abstimm_ergebnis_bemerkung").isJsonNull()) && !jsonObj.get("abstimm_ergebnis_bemerkung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstimm_ergebnis_bemerkung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstimm_ergebnis_bemerkung").toString()));
      }
      if ((jsonObj.get("grundlage") != null && !jsonObj.get("grundlage").isJsonNull()) && !jsonObj.get("grundlage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grundlage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grundlage").toString()));
      }
      if ((jsonObj.get("dokumentnummer") != null && !jsonObj.get("dokumentnummer").isJsonNull()) && !jsonObj.get("dokumentnummer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentnummer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentnummer").toString()));
      }
      if ((jsonObj.get("mehrheit") != null && !jsonObj.get("mehrheit").isJsonNull()) && !jsonObj.get("mehrheit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mehrheit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mehrheit").toString()));
      }
      // validate the optional field `mehrheit`
      if (jsonObj.get("mehrheit") != null && !jsonObj.get("mehrheit").isJsonNull()) {
        MehrheitEnum.validateJsonElement(jsonObj.get("mehrheit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Beschlussfassung.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Beschlussfassung' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Beschlussfassung> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Beschlussfassung.class));

       return (TypeAdapter<T>) new TypeAdapter<Beschlussfassung>() {
           @Override
           public void write(JsonWriter out, Beschlussfassung value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Beschlussfassung read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Beschlussfassung given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Beschlussfassung
   * @throws IOException if the JSON string is invalid with respect to Beschlussfassung
   */
  public static Beschlussfassung fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Beschlussfassung.class);
  }

  /**
   * Convert an instance of Beschlussfassung to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

