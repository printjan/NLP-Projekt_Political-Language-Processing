/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Inkrafttreten;
import org.openapitools.client.model.Verkuendung;
import org.openapitools.client.model.VorgangDeskriptor;
import org.openapitools.client.model.VorgangVerlinkung;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert Metadaten zu einem Vorgang.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Vorgang {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  /**
   * Gets or Sets typ
   */
  @JsonAdapter(TypEnum.Adapter.class)
  public enum TypEnum {
    VORGANG("Vorgang");

    private String value;

    TypEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypEnum fromValue(String value) {
      for (TypEnum b : TypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  @javax.annotation.Nonnull
  private TypEnum typ;

  public static final String SERIALIZED_NAME_BERATUNGSSTAND = "beratungsstand";
  @SerializedName(SERIALIZED_NAME_BERATUNGSSTAND)
  @javax.annotation.Nullable
  private String beratungsstand;

  public static final String SERIALIZED_NAME_VORGANGSTYP = "vorgangstyp";
  @SerializedName(SERIALIZED_NAME_VORGANGSTYP)
  @javax.annotation.Nonnull
  private String vorgangstyp;

  public static final String SERIALIZED_NAME_WAHLPERIODE = "wahlperiode";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE)
  @javax.annotation.Nonnull
  private Integer wahlperiode;

  public static final String SERIALIZED_NAME_INITIATIVE = "initiative";
  @SerializedName(SERIALIZED_NAME_INITIATIVE)
  @javax.annotation.Nullable
  private List<String> initiative = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATUM = "datum";
  @SerializedName(SERIALIZED_NAME_DATUM)
  @javax.annotation.Nullable
  private LocalDate datum;

  public static final String SERIALIZED_NAME_AKTUALISIERT = "aktualisiert";
  @SerializedName(SERIALIZED_NAME_AKTUALISIERT)
  @javax.annotation.Nonnull
  private OffsetDateTime aktualisiert;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_ABSTRACT = "abstract";
  @SerializedName(SERIALIZED_NAME_ABSTRACT)
  @javax.annotation.Nullable
  private String _abstract;

  public static final String SERIALIZED_NAME_SACHGEBIET = "sachgebiet";
  @SerializedName(SERIALIZED_NAME_SACHGEBIET)
  @javax.annotation.Nullable
  private List<String> sachgebiet = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESKRIPTOR = "deskriptor";
  @SerializedName(SERIALIZED_NAME_DESKRIPTOR)
  @javax.annotation.Nullable
  private List<VorgangDeskriptor> deskriptor = new ArrayList<>();

  public static final String SERIALIZED_NAME_GESTA = "gesta";
  @SerializedName(SERIALIZED_NAME_GESTA)
  @javax.annotation.Nullable
  private String gesta;

  public static final String SERIALIZED_NAME_ZUSTIMMUNGSBEDUERFTIGKEIT = "zustimmungsbeduerftigkeit";
  @SerializedName(SERIALIZED_NAME_ZUSTIMMUNGSBEDUERFTIGKEIT)
  @javax.annotation.Nullable
  private List<String> zustimmungsbeduerftigkeit = new ArrayList<>();

  public static final String SERIALIZED_NAME_KOM = "kom";
  @SerializedName(SERIALIZED_NAME_KOM)
  @javax.annotation.Nullable
  private String kom;

  public static final String SERIALIZED_NAME_RATSDOK = "ratsdok";
  @SerializedName(SERIALIZED_NAME_RATSDOK)
  @javax.annotation.Nullable
  private String ratsdok;

  public static final String SERIALIZED_NAME_VERKUENDUNG = "verkuendung";
  @SerializedName(SERIALIZED_NAME_VERKUENDUNG)
  @javax.annotation.Nullable
  private List<Verkuendung> verkuendung = new ArrayList<>();

  public static final String SERIALIZED_NAME_INKRAFTTRETEN = "inkrafttreten";
  @SerializedName(SERIALIZED_NAME_INKRAFTTRETEN)
  @javax.annotation.Nullable
  private List<Inkrafttreten> inkrafttreten = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARCHIV = "archiv";
  @SerializedName(SERIALIZED_NAME_ARCHIV)
  @javax.annotation.Nullable
  private String archiv;

  public static final String SERIALIZED_NAME_MITTEILUNG = "mitteilung";
  @SerializedName(SERIALIZED_NAME_MITTEILUNG)
  @javax.annotation.Nullable
  private String mitteilung;

  public static final String SERIALIZED_NAME_VORGANG_VERLINKUNG = "vorgang_verlinkung";
  @SerializedName(SERIALIZED_NAME_VORGANG_VERLINKUNG)
  @javax.annotation.Nullable
  private List<VorgangVerlinkung> vorgangVerlinkung = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEK = "sek";
  @SerializedName(SERIALIZED_NAME_SEK)
  @javax.annotation.Nullable
  private String sek;

  public Vorgang() {
  }

  public Vorgang id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Vorgang typ(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nonnull
  public TypEnum getTyp() {
    return typ;
  }

  public void setTyp(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
  }


  public Vorgang beratungsstand(@javax.annotation.Nullable String beratungsstand) {
    this.beratungsstand = beratungsstand;
    return this;
  }

  /**
   * Get beratungsstand
   * @return beratungsstand
   */
  @javax.annotation.Nullable
  public String getBeratungsstand() {
    return beratungsstand;
  }

  public void setBeratungsstand(@javax.annotation.Nullable String beratungsstand) {
    this.beratungsstand = beratungsstand;
  }


  public Vorgang vorgangstyp(@javax.annotation.Nonnull String vorgangstyp) {
    this.vorgangstyp = vorgangstyp;
    return this;
  }

  /**
   * Get vorgangstyp
   * @return vorgangstyp
   */
  @javax.annotation.Nonnull
  public String getVorgangstyp() {
    return vorgangstyp;
  }

  public void setVorgangstyp(@javax.annotation.Nonnull String vorgangstyp) {
    this.vorgangstyp = vorgangstyp;
  }


  public Vorgang wahlperiode(@javax.annotation.Nonnull Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
    return this;
  }

  /**
   * Get wahlperiode
   * @return wahlperiode
   */
  @javax.annotation.Nonnull
  public Integer getWahlperiode() {
    return wahlperiode;
  }

  public void setWahlperiode(@javax.annotation.Nonnull Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
  }


  public Vorgang initiative(@javax.annotation.Nullable List<String> initiative) {
    this.initiative = initiative;
    return this;
  }

  public Vorgang addInitiativeItem(String initiativeItem) {
    if (this.initiative == null) {
      this.initiative = new ArrayList<>();
    }
    this.initiative.add(initiativeItem);
    return this;
  }

  /**
   * Get initiative
   * @return initiative
   */
  @javax.annotation.Nullable
  public List<String> getInitiative() {
    return initiative;
  }

  public void setInitiative(@javax.annotation.Nullable List<String> initiative) {
    this.initiative = initiative;
  }


  public Vorgang datum(@javax.annotation.Nullable LocalDate datum) {
    this.datum = datum;
    return this;
  }

  /**
   * Datierung des letzten zugehörigen Dokuments
   * @return datum
   */
  @javax.annotation.Nullable
  public LocalDate getDatum() {
    return datum;
  }

  public void setDatum(@javax.annotation.Nullable LocalDate datum) {
    this.datum = datum;
  }


  public Vorgang aktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
    return this;
  }

  /**
   * Letzte Aktualisierung der Entität
   * @return aktualisiert
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAktualisiert() {
    return aktualisiert;
  }

  public void setAktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
  }


  public Vorgang titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public Vorgang _abstract(@javax.annotation.Nullable String _abstract) {
    this._abstract = _abstract;
    return this;
  }

  /**
   * Get _abstract
   * @return _abstract
   */
  @javax.annotation.Nullable
  public String getAbstract() {
    return _abstract;
  }

  public void setAbstract(@javax.annotation.Nullable String _abstract) {
    this._abstract = _abstract;
  }


  public Vorgang sachgebiet(@javax.annotation.Nullable List<String> sachgebiet) {
    this.sachgebiet = sachgebiet;
    return this;
  }

  public Vorgang addSachgebietItem(String sachgebietItem) {
    if (this.sachgebiet == null) {
      this.sachgebiet = new ArrayList<>();
    }
    this.sachgebiet.add(sachgebietItem);
    return this;
  }

  /**
   * Get sachgebiet
   * @return sachgebiet
   */
  @javax.annotation.Nullable
  public List<String> getSachgebiet() {
    return sachgebiet;
  }

  public void setSachgebiet(@javax.annotation.Nullable List<String> sachgebiet) {
    this.sachgebiet = sachgebiet;
  }


  public Vorgang deskriptor(@javax.annotation.Nullable List<VorgangDeskriptor> deskriptor) {
    this.deskriptor = deskriptor;
    return this;
  }

  public Vorgang addDeskriptorItem(VorgangDeskriptor deskriptorItem) {
    if (this.deskriptor == null) {
      this.deskriptor = new ArrayList<>();
    }
    this.deskriptor.add(deskriptorItem);
    return this;
  }

  /**
   * Get deskriptor
   * @return deskriptor
   */
  @javax.annotation.Nullable
  public List<VorgangDeskriptor> getDeskriptor() {
    return deskriptor;
  }

  public void setDeskriptor(@javax.annotation.Nullable List<VorgangDeskriptor> deskriptor) {
    this.deskriptor = deskriptor;
  }


  public Vorgang gesta(@javax.annotation.Nullable String gesta) {
    this.gesta = gesta;
    return this;
  }

  /**
   * GESTA-Ordnungsnummer
   * @return gesta
   */
  @javax.annotation.Nullable
  public String getGesta() {
    return gesta;
  }

  public void setGesta(@javax.annotation.Nullable String gesta) {
    this.gesta = gesta;
  }


  public Vorgang zustimmungsbeduerftigkeit(@javax.annotation.Nullable List<String> zustimmungsbeduerftigkeit) {
    this.zustimmungsbeduerftigkeit = zustimmungsbeduerftigkeit;
    return this;
  }

  public Vorgang addZustimmungsbeduerftigkeitItem(String zustimmungsbeduerftigkeitItem) {
    if (this.zustimmungsbeduerftigkeit == null) {
      this.zustimmungsbeduerftigkeit = new ArrayList<>();
    }
    this.zustimmungsbeduerftigkeit.add(zustimmungsbeduerftigkeitItem);
    return this;
  }

  /**
   * Get zustimmungsbeduerftigkeit
   * @return zustimmungsbeduerftigkeit
   */
  @javax.annotation.Nullable
  public List<String> getZustimmungsbeduerftigkeit() {
    return zustimmungsbeduerftigkeit;
  }

  public void setZustimmungsbeduerftigkeit(@javax.annotation.Nullable List<String> zustimmungsbeduerftigkeit) {
    this.zustimmungsbeduerftigkeit = zustimmungsbeduerftigkeit;
  }


  public Vorgang kom(@javax.annotation.Nullable String kom) {
    this.kom = kom;
    return this;
  }

  /**
   * KOM-Nr.
   * @return kom
   */
  @javax.annotation.Nullable
  public String getKom() {
    return kom;
  }

  public void setKom(@javax.annotation.Nullable String kom) {
    this.kom = kom;
  }


  public Vorgang ratsdok(@javax.annotation.Nullable String ratsdok) {
    this.ratsdok = ratsdok;
    return this;
  }

  /**
   * Ratsdok-Nr.
   * @return ratsdok
   */
  @javax.annotation.Nullable
  public String getRatsdok() {
    return ratsdok;
  }

  public void setRatsdok(@javax.annotation.Nullable String ratsdok) {
    this.ratsdok = ratsdok;
  }


  public Vorgang verkuendung(@javax.annotation.Nullable List<Verkuendung> verkuendung) {
    this.verkuendung = verkuendung;
    return this;
  }

  public Vorgang addVerkuendungItem(Verkuendung verkuendungItem) {
    if (this.verkuendung == null) {
      this.verkuendung = new ArrayList<>();
    }
    this.verkuendung.add(verkuendungItem);
    return this;
  }

  /**
   * Get verkuendung
   * @return verkuendung
   */
  @javax.annotation.Nullable
  public List<Verkuendung> getVerkuendung() {
    return verkuendung;
  }

  public void setVerkuendung(@javax.annotation.Nullable List<Verkuendung> verkuendung) {
    this.verkuendung = verkuendung;
  }


  public Vorgang inkrafttreten(@javax.annotation.Nullable List<Inkrafttreten> inkrafttreten) {
    this.inkrafttreten = inkrafttreten;
    return this;
  }

  public Vorgang addInkrafttretenItem(Inkrafttreten inkrafttretenItem) {
    if (this.inkrafttreten == null) {
      this.inkrafttreten = new ArrayList<>();
    }
    this.inkrafttreten.add(inkrafttretenItem);
    return this;
  }

  /**
   * Get inkrafttreten
   * @return inkrafttreten
   */
  @javax.annotation.Nullable
  public List<Inkrafttreten> getInkrafttreten() {
    return inkrafttreten;
  }

  public void setInkrafttreten(@javax.annotation.Nullable List<Inkrafttreten> inkrafttreten) {
    this.inkrafttreten = inkrafttreten;
  }


  public Vorgang archiv(@javax.annotation.Nullable String archiv) {
    this.archiv = archiv;
    return this;
  }

  /**
   * Archivsignatur
   * @return archiv
   */
  @javax.annotation.Nullable
  public String getArchiv() {
    return archiv;
  }

  public void setArchiv(@javax.annotation.Nullable String archiv) {
    this.archiv = archiv;
  }


  public Vorgang mitteilung(@javax.annotation.Nullable String mitteilung) {
    this.mitteilung = mitteilung;
    return this;
  }

  /**
   * Get mitteilung
   * @return mitteilung
   */
  @javax.annotation.Nullable
  public String getMitteilung() {
    return mitteilung;
  }

  public void setMitteilung(@javax.annotation.Nullable String mitteilung) {
    this.mitteilung = mitteilung;
  }


  public Vorgang vorgangVerlinkung(@javax.annotation.Nullable List<VorgangVerlinkung> vorgangVerlinkung) {
    this.vorgangVerlinkung = vorgangVerlinkung;
    return this;
  }

  public Vorgang addVorgangVerlinkungItem(VorgangVerlinkung vorgangVerlinkungItem) {
    if (this.vorgangVerlinkung == null) {
      this.vorgangVerlinkung = new ArrayList<>();
    }
    this.vorgangVerlinkung.add(vorgangVerlinkungItem);
    return this;
  }

  /**
   * Get vorgangVerlinkung
   * @return vorgangVerlinkung
   */
  @javax.annotation.Nullable
  public List<VorgangVerlinkung> getVorgangVerlinkung() {
    return vorgangVerlinkung;
  }

  public void setVorgangVerlinkung(@javax.annotation.Nullable List<VorgangVerlinkung> vorgangVerlinkung) {
    this.vorgangVerlinkung = vorgangVerlinkung;
  }


  public Vorgang sek(@javax.annotation.Nullable String sek) {
    this.sek = sek;
    return this;
  }

  /**
   * SEK-Nr.
   * @return sek
   */
  @javax.annotation.Nullable
  public String getSek() {
    return sek;
  }

  public void setSek(@javax.annotation.Nullable String sek) {
    this.sek = sek;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vorgang vorgang = (Vorgang) o;
    return Objects.equals(this.id, vorgang.id) &&
        Objects.equals(this.typ, vorgang.typ) &&
        Objects.equals(this.beratungsstand, vorgang.beratungsstand) &&
        Objects.equals(this.vorgangstyp, vorgang.vorgangstyp) &&
        Objects.equals(this.wahlperiode, vorgang.wahlperiode) &&
        Objects.equals(this.initiative, vorgang.initiative) &&
        Objects.equals(this.datum, vorgang.datum) &&
        Objects.equals(this.aktualisiert, vorgang.aktualisiert) &&
        Objects.equals(this.titel, vorgang.titel) &&
        Objects.equals(this._abstract, vorgang._abstract) &&
        Objects.equals(this.sachgebiet, vorgang.sachgebiet) &&
        Objects.equals(this.deskriptor, vorgang.deskriptor) &&
        Objects.equals(this.gesta, vorgang.gesta) &&
        Objects.equals(this.zustimmungsbeduerftigkeit, vorgang.zustimmungsbeduerftigkeit) &&
        Objects.equals(this.kom, vorgang.kom) &&
        Objects.equals(this.ratsdok, vorgang.ratsdok) &&
        Objects.equals(this.verkuendung, vorgang.verkuendung) &&
        Objects.equals(this.inkrafttreten, vorgang.inkrafttreten) &&
        Objects.equals(this.archiv, vorgang.archiv) &&
        Objects.equals(this.mitteilung, vorgang.mitteilung) &&
        Objects.equals(this.vorgangVerlinkung, vorgang.vorgangVerlinkung) &&
        Objects.equals(this.sek, vorgang.sek);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typ, beratungsstand, vorgangstyp, wahlperiode, initiative, datum, aktualisiert, titel, _abstract, sachgebiet, deskriptor, gesta, zustimmungsbeduerftigkeit, kom, ratsdok, verkuendung, inkrafttreten, archiv, mitteilung, vorgangVerlinkung, sek);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vorgang {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    beratungsstand: ").append(toIndentedString(beratungsstand)).append("\n");
    sb.append("    vorgangstyp: ").append(toIndentedString(vorgangstyp)).append("\n");
    sb.append("    wahlperiode: ").append(toIndentedString(wahlperiode)).append("\n");
    sb.append("    initiative: ").append(toIndentedString(initiative)).append("\n");
    sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
    sb.append("    aktualisiert: ").append(toIndentedString(aktualisiert)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("    sachgebiet: ").append(toIndentedString(sachgebiet)).append("\n");
    sb.append("    deskriptor: ").append(toIndentedString(deskriptor)).append("\n");
    sb.append("    gesta: ").append(toIndentedString(gesta)).append("\n");
    sb.append("    zustimmungsbeduerftigkeit: ").append(toIndentedString(zustimmungsbeduerftigkeit)).append("\n");
    sb.append("    kom: ").append(toIndentedString(kom)).append("\n");
    sb.append("    ratsdok: ").append(toIndentedString(ratsdok)).append("\n");
    sb.append("    verkuendung: ").append(toIndentedString(verkuendung)).append("\n");
    sb.append("    inkrafttreten: ").append(toIndentedString(inkrafttreten)).append("\n");
    sb.append("    archiv: ").append(toIndentedString(archiv)).append("\n");
    sb.append("    mitteilung: ").append(toIndentedString(mitteilung)).append("\n");
    sb.append("    vorgangVerlinkung: ").append(toIndentedString(vorgangVerlinkung)).append("\n");
    sb.append("    sek: ").append(toIndentedString(sek)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("typ");
    openapiFields.add("beratungsstand");
    openapiFields.add("vorgangstyp");
    openapiFields.add("wahlperiode");
    openapiFields.add("initiative");
    openapiFields.add("datum");
    openapiFields.add("aktualisiert");
    openapiFields.add("titel");
    openapiFields.add("abstract");
    openapiFields.add("sachgebiet");
    openapiFields.add("deskriptor");
    openapiFields.add("gesta");
    openapiFields.add("zustimmungsbeduerftigkeit");
    openapiFields.add("kom");
    openapiFields.add("ratsdok");
    openapiFields.add("verkuendung");
    openapiFields.add("inkrafttreten");
    openapiFields.add("archiv");
    openapiFields.add("mitteilung");
    openapiFields.add("vorgang_verlinkung");
    openapiFields.add("sek");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("typ");
    openapiRequiredFields.add("vorgangstyp");
    openapiRequiredFields.add("wahlperiode");
    openapiRequiredFields.add("aktualisiert");
    openapiRequiredFields.add("titel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vorgang
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vorgang.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vorgang is not found in the empty JSON string", Vorgang.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vorgang.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vorgang` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vorgang.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      // validate the required field `typ`
      TypEnum.validateJsonElement(jsonObj.get("typ"));
      if ((jsonObj.get("beratungsstand") != null && !jsonObj.get("beratungsstand").isJsonNull()) && !jsonObj.get("beratungsstand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beratungsstand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beratungsstand").toString()));
      }
      if (!jsonObj.get("vorgangstyp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vorgangstyp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vorgangstyp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("initiative") != null && !jsonObj.get("initiative").isJsonNull() && !jsonObj.get("initiative").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiative` to be an array in the JSON string but got `%s`", jsonObj.get("initiative").toString()));
      }
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      if ((jsonObj.get("abstract") != null && !jsonObj.get("abstract").isJsonNull()) && !jsonObj.get("abstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstract").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sachgebiet") != null && !jsonObj.get("sachgebiet").isJsonNull() && !jsonObj.get("sachgebiet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sachgebiet` to be an array in the JSON string but got `%s`", jsonObj.get("sachgebiet").toString()));
      }
      if (jsonObj.get("deskriptor") != null && !jsonObj.get("deskriptor").isJsonNull()) {
        JsonArray jsonArraydeskriptor = jsonObj.getAsJsonArray("deskriptor");
        if (jsonArraydeskriptor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deskriptor").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deskriptor` to be an array in the JSON string but got `%s`", jsonObj.get("deskriptor").toString()));
          }

          // validate the optional field `deskriptor` (array)
          for (int i = 0; i < jsonArraydeskriptor.size(); i++) {
            VorgangDeskriptor.validateJsonElement(jsonArraydeskriptor.get(i));
          };
        }
      }
      if ((jsonObj.get("gesta") != null && !jsonObj.get("gesta").isJsonNull()) && !jsonObj.get("gesta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gesta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gesta").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zustimmungsbeduerftigkeit") != null && !jsonObj.get("zustimmungsbeduerftigkeit").isJsonNull() && !jsonObj.get("zustimmungsbeduerftigkeit").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zustimmungsbeduerftigkeit` to be an array in the JSON string but got `%s`", jsonObj.get("zustimmungsbeduerftigkeit").toString()));
      }
      if ((jsonObj.get("kom") != null && !jsonObj.get("kom").isJsonNull()) && !jsonObj.get("kom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kom").toString()));
      }
      if ((jsonObj.get("ratsdok") != null && !jsonObj.get("ratsdok").isJsonNull()) && !jsonObj.get("ratsdok").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratsdok` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratsdok").toString()));
      }
      if (jsonObj.get("verkuendung") != null && !jsonObj.get("verkuendung").isJsonNull()) {
        JsonArray jsonArrayverkuendung = jsonObj.getAsJsonArray("verkuendung");
        if (jsonArrayverkuendung != null) {
          // ensure the json data is an array
          if (!jsonObj.get("verkuendung").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `verkuendung` to be an array in the JSON string but got `%s`", jsonObj.get("verkuendung").toString()));
          }

          // validate the optional field `verkuendung` (array)
          for (int i = 0; i < jsonArrayverkuendung.size(); i++) {
            Verkuendung.validateJsonElement(jsonArrayverkuendung.get(i));
          };
        }
      }
      if (jsonObj.get("inkrafttreten") != null && !jsonObj.get("inkrafttreten").isJsonNull()) {
        JsonArray jsonArrayinkrafttreten = jsonObj.getAsJsonArray("inkrafttreten");
        if (jsonArrayinkrafttreten != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inkrafttreten").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inkrafttreten` to be an array in the JSON string but got `%s`", jsonObj.get("inkrafttreten").toString()));
          }

          // validate the optional field `inkrafttreten` (array)
          for (int i = 0; i < jsonArrayinkrafttreten.size(); i++) {
            Inkrafttreten.validateJsonElement(jsonArrayinkrafttreten.get(i));
          };
        }
      }
      if ((jsonObj.get("archiv") != null && !jsonObj.get("archiv").isJsonNull()) && !jsonObj.get("archiv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiv").toString()));
      }
      if ((jsonObj.get("mitteilung") != null && !jsonObj.get("mitteilung").isJsonNull()) && !jsonObj.get("mitteilung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mitteilung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mitteilung").toString()));
      }
      if (jsonObj.get("vorgang_verlinkung") != null && !jsonObj.get("vorgang_verlinkung").isJsonNull()) {
        JsonArray jsonArrayvorgangVerlinkung = jsonObj.getAsJsonArray("vorgang_verlinkung");
        if (jsonArrayvorgangVerlinkung != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vorgang_verlinkung").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vorgang_verlinkung` to be an array in the JSON string but got `%s`", jsonObj.get("vorgang_verlinkung").toString()));
          }

          // validate the optional field `vorgang_verlinkung` (array)
          for (int i = 0; i < jsonArrayvorgangVerlinkung.size(); i++) {
            VorgangVerlinkung.validateJsonElement(jsonArrayvorgangVerlinkung.get(i));
          };
        }
      }
      if ((jsonObj.get("sek") != null && !jsonObj.get("sek").isJsonNull()) && !jsonObj.get("sek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sek").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vorgang.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vorgang' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vorgang> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vorgang.class));

       return (TypeAdapter<T>) new TypeAdapter<Vorgang>() {
           @Override
           public void write(JsonWriter out, Vorgang value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vorgang read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vorgang given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vorgang
   * @throws IOException if the JSON string is invalid with respect to Vorgang
   */
  public static Vorgang fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vorgang.class);
  }

  /**
   * Convert an instance of Vorgang to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

