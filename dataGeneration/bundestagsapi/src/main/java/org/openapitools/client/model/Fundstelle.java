/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems für Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Quadrant;
import org.openapitools.client.model.Zuordnung;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Liefert im Vorgangsablauf das zu einem Vorgangsschritt gehörende Dokument
 * (Drucksache oder Protokoll). Beispiel: „BT-Drucksache 19/1 (Antrag Fraktion
 * der CDU/CSU)“ oder beim Vorgangsschritt Beratung „BT-Plenarprotokoll 19/1, S.
 * 4C-12A“.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class Fundstelle {
	public static final String SERIALIZED_NAME_ID = "id";
	@SerializedName(SERIALIZED_NAME_ID)
	@javax.annotation.Nonnull
	private String id;

	/**
	 * Gets or Sets dokumentart
	 */
	@JsonAdapter(DokumentartEnum.Adapter.class)
	public enum DokumentartEnum {
		DRUCKSACHE("Drucksache"),

		PLENARPROTOKOLL("Plenarprotokoll");

		private String value;

		DokumentartEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static DokumentartEnum fromValue(String value) {
			for (DokumentartEnum b : DokumentartEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		public static class Adapter extends TypeAdapter<DokumentartEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final DokumentartEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public DokumentartEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return DokumentartEnum.fromValue(value);
			}
		}

		public static void validateJsonElement(JsonElement jsonElement) throws IOException {
			String value = jsonElement.getAsString();
			DokumentartEnum.fromValue(value);
		}
	}

	public static final String SERIALIZED_NAME_DOKUMENTART = "dokumentart";
	@SerializedName(SERIALIZED_NAME_DOKUMENTART)
	@javax.annotation.Nonnull
	private DokumentartEnum dokumentart;

	public static final String SERIALIZED_NAME_PDF_URL = "pdf_url";
	@SerializedName(SERIALIZED_NAME_PDF_URL)
	@javax.annotation.Nullable
	private String pdfUrl;

	public static final String SERIALIZED_NAME_XML_URL = "xml_url";
	@SerializedName(SERIALIZED_NAME_XML_URL)
	@javax.annotation.Nullable
	private String xmlUrl;

	public static final String SERIALIZED_NAME_DOKUMENTNUMMER = "dokumentnummer";
	@SerializedName(SERIALIZED_NAME_DOKUMENTNUMMER)
	@javax.annotation.Nonnull
	private String dokumentnummer;

	public static final String SERIALIZED_NAME_DATUM = "datum";
	@SerializedName(SERIALIZED_NAME_DATUM)
	@javax.annotation.Nonnull
	private LocalDate datum;

	public static final String SERIALIZED_NAME_DRUCKSACHETYP = "drucksachetyp";
	@SerializedName(SERIALIZED_NAME_DRUCKSACHETYP)
	@javax.annotation.Nullable
	private String drucksachetyp;

	public static final String SERIALIZED_NAME_HERAUSGEBER = "herausgeber";
	@SerializedName(SERIALIZED_NAME_HERAUSGEBER)
	@javax.annotation.Nonnull
	private Zuordnung herausgeber;

	public static final String SERIALIZED_NAME_URHEBER = "urheber";
	@SerializedName(SERIALIZED_NAME_URHEBER)
	@javax.annotation.Nonnull
	private List<String> urheber = new ArrayList<>();

	public static final String SERIALIZED_NAME_VERTEILDATUM = "verteildatum";
	@SerializedName(SERIALIZED_NAME_VERTEILDATUM)
	@javax.annotation.Nullable
	private LocalDate verteildatum;

	public static final String SERIALIZED_NAME_SEITE = "seite";
	@SerializedName(SERIALIZED_NAME_SEITE)
	@javax.annotation.Nullable
	private String seite;

	public static final String SERIALIZED_NAME_ANFANGSSEITE = "anfangsseite";
	@SerializedName(SERIALIZED_NAME_ANFANGSSEITE)
	@javax.annotation.Nullable
	private Integer anfangsseite;

	public static final String SERIALIZED_NAME_ENDSEITE = "endseite";
	@SerializedName(SERIALIZED_NAME_ENDSEITE)
	@javax.annotation.Nullable
	private Integer endseite;

	public static final String SERIALIZED_NAME_ANFANGSQUADRANT = "anfangsquadrant";
	@SerializedName(SERIALIZED_NAME_ANFANGSQUADRANT)
	@javax.annotation.Nullable
	private Quadrant anfangsquadrant;

	public static final String SERIALIZED_NAME_ENDQUADRANT = "endquadrant";
	@SerializedName(SERIALIZED_NAME_ENDQUADRANT)
	@javax.annotation.Nullable
	private Quadrant endquadrant;

	public static final String SERIALIZED_NAME_FRAGE_NUMMER = "frage_nummer";
	@SerializedName(SERIALIZED_NAME_FRAGE_NUMMER)
	@javax.annotation.Nullable
	private String frageNummer;

	public static final String SERIALIZED_NAME_ANLAGEN = "anlagen";
	@SerializedName(SERIALIZED_NAME_ANLAGEN)
	@javax.annotation.Nullable
	private String anlagen;

	public static final String SERIALIZED_NAME_TOP = "top";
	@SerializedName(SERIALIZED_NAME_TOP)
	@javax.annotation.Nullable
	private Integer top;

	public static final String SERIALIZED_NAME_TOP_ZUSATZ = "top_zusatz";
	@SerializedName(SERIALIZED_NAME_TOP_ZUSATZ)
	@javax.annotation.Nullable
	private String topZusatz;

	public Fundstelle() {
	}

	public Fundstelle id(@javax.annotation.Nonnull String id) {
		this.id = id;
		return this;
	}

	/**
	 * ID einer Drucksache oder eines Plenarprotokolls
	 *
	 * @return id
	 */
	@javax.annotation.Nonnull
	public String getId() {
		return id;
	}

	public void setId(@javax.annotation.Nonnull String id) {
		this.id = id;
	}

	public Fundstelle dokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
		this.dokumentart = dokumentart;
		return this;
	}

	/**
	 * Get dokumentart
	 *
	 * @return dokumentart
	 */
	@javax.annotation.Nonnull
	public DokumentartEnum getDokumentart() {
		return dokumentart;
	}

	public void setDokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
		this.dokumentart = dokumentart;
	}

	public Fundstelle pdfUrl(@javax.annotation.Nullable String pdfUrl) {
		this.pdfUrl = pdfUrl;
		return this;
	}

	/**
	 * Get pdfUrl
	 *
	 * @return pdfUrl
	 */
	@javax.annotation.Nullable
	public String getPdfUrl() {
		return pdfUrl;
	}

	public void setPdfUrl(@javax.annotation.Nullable String pdfUrl) {
		this.pdfUrl = pdfUrl;
	}

	public Fundstelle xmlUrl(@javax.annotation.Nullable String xmlUrl) {
		this.xmlUrl = xmlUrl;
		return this;
	}

	/**
	 * Get xmlUrl
	 *
	 * @return xmlUrl
	 */
	@javax.annotation.Nullable
	public String getXmlUrl() {
		return xmlUrl;
	}

	public void setXmlUrl(@javax.annotation.Nullable String xmlUrl) {
		this.xmlUrl = xmlUrl;
	}

	public Fundstelle dokumentnummer(@javax.annotation.Nonnull String dokumentnummer) {
		this.dokumentnummer = dokumentnummer;
		return this;
	}

	/**
	 * Get dokumentnummer
	 *
	 * @return dokumentnummer
	 */
	@javax.annotation.Nonnull
	public String getDokumentnummer() {
		return dokumentnummer;
	}

	public void setDokumentnummer(@javax.annotation.Nonnull String dokumentnummer) {
		this.dokumentnummer = dokumentnummer;
	}

	public Fundstelle datum(@javax.annotation.Nonnull LocalDate datum) {
		this.datum = datum;
		return this;
	}

	/**
	 * Get datum
	 *
	 * @return datum
	 */
	@javax.annotation.Nonnull
	public LocalDate getDatum() {
		return datum;
	}

	public void setDatum(@javax.annotation.Nonnull LocalDate datum) {
		this.datum = datum;
	}

	public Fundstelle drucksachetyp(@javax.annotation.Nullable String drucksachetyp) {
		this.drucksachetyp = drucksachetyp;
		return this;
	}

	/**
	 * Get drucksachetyp
	 *
	 * @return drucksachetyp
	 */
	@javax.annotation.Nullable
	public String getDrucksachetyp() {
		return drucksachetyp;
	}

	public void setDrucksachetyp(@javax.annotation.Nullable String drucksachetyp) {
		this.drucksachetyp = drucksachetyp;
	}

	public Fundstelle herausgeber(@javax.annotation.Nonnull Zuordnung herausgeber) {
		this.herausgeber = herausgeber;
		return this;
	}

	/**
	 * Get herausgeber
	 *
	 * @return herausgeber
	 */
	@javax.annotation.Nonnull
	public Zuordnung getHerausgeber() {
		return herausgeber;
	}

	public void setHerausgeber(@javax.annotation.Nonnull Zuordnung herausgeber) {
		this.herausgeber = herausgeber;
	}

	public Fundstelle urheber(@javax.annotation.Nonnull List<String> urheber) {
		this.urheber = urheber;
		return this;
	}

	public Fundstelle addUrheberItem(String urheberItem) {
		if (this.urheber == null) {
			this.urheber = new ArrayList<>();
		}
		this.urheber.add(urheberItem);
		return this;
	}

	/**
	 * Get urheber
	 *
	 * @return urheber
	 */
	@javax.annotation.Nonnull
	public List<String> getUrheber() {
		return urheber;
	}

	public void setUrheber(@javax.annotation.Nonnull List<String> urheber) {
		this.urheber = urheber;
	}

	public Fundstelle verteildatum(@javax.annotation.Nullable LocalDate verteildatum) {
		this.verteildatum = verteildatum;
		return this;
	}

	/**
	 * Get verteildatum
	 *
	 * @return verteildatum
	 */
	@javax.annotation.Nullable
	public LocalDate getVerteildatum() {
		return verteildatum;
	}

	public void setVerteildatum(@javax.annotation.Nullable LocalDate verteildatum) {
		this.verteildatum = verteildatum;
	}

	public Fundstelle seite(@javax.annotation.Nullable String seite) {
		this.seite = seite;
		return this;
	}

	/**
	 * Get seite
	 *
	 * @return seite
	 */
	@javax.annotation.Nullable
	public String getSeite() {
		return seite;
	}

	public void setSeite(@javax.annotation.Nullable String seite) {
		this.seite = seite;
	}

	public Fundstelle anfangsseite(@javax.annotation.Nullable Integer anfangsseite) {
		this.anfangsseite = anfangsseite;
		return this;
	}

	/**
	 * Get anfangsseite
	 *
	 * @return anfangsseite
	 */
	@javax.annotation.Nullable
	public Integer getAnfangsseite() {
		return anfangsseite;
	}

	public void setAnfangsseite(@javax.annotation.Nullable Integer anfangsseite) {
		this.anfangsseite = anfangsseite;
	}

	public Fundstelle endseite(@javax.annotation.Nullable Integer endseite) {
		this.endseite = endseite;
		return this;
	}

	/**
	 * Get endseite
	 *
	 * @return endseite
	 */
	@javax.annotation.Nullable
	public Integer getEndseite() {
		return endseite;
	}

	public void setEndseite(@javax.annotation.Nullable Integer endseite) {
		this.endseite = endseite;
	}

	public Fundstelle anfangsquadrant(@javax.annotation.Nullable Quadrant anfangsquadrant) {
		this.anfangsquadrant = anfangsquadrant;
		return this;
	}

	/**
	 * Get anfangsquadrant
	 *
	 * @return anfangsquadrant
	 */
	@javax.annotation.Nullable
	public Quadrant getAnfangsquadrant() {
		return anfangsquadrant;
	}

	public void setAnfangsquadrant(@javax.annotation.Nullable Quadrant anfangsquadrant) {
		this.anfangsquadrant = anfangsquadrant;
	}

	public Fundstelle endquadrant(@javax.annotation.Nullable Quadrant endquadrant) {
		this.endquadrant = endquadrant;
		return this;
	}

	/**
	 * Get endquadrant
	 *
	 * @return endquadrant
	 */
	@javax.annotation.Nullable
	public Quadrant getEndquadrant() {
		return endquadrant;
	}

	public void setEndquadrant(@javax.annotation.Nullable Quadrant endquadrant) {
		this.endquadrant = endquadrant;
	}

	public Fundstelle frageNummer(@javax.annotation.Nullable String frageNummer) {
		this.frageNummer = frageNummer;
		return this;
	}

	/**
	 * Get frageNummer
	 *
	 * @return frageNummer
	 */
	@javax.annotation.Nullable
	public String getFrageNummer() {
		return frageNummer;
	}

	public void setFrageNummer(@javax.annotation.Nullable String frageNummer) {
		this.frageNummer = frageNummer;
	}

	public Fundstelle anlagen(@javax.annotation.Nullable String anlagen) {
		this.anlagen = anlagen;
		return this;
	}

	/**
	 * Get anlagen
	 *
	 * @return anlagen
	 */
	@javax.annotation.Nullable
	public String getAnlagen() {
		return anlagen;
	}

	public void setAnlagen(@javax.annotation.Nullable String anlagen) {
		this.anlagen = anlagen;
	}

	public Fundstelle top(@javax.annotation.Nullable Integer top) {
		this.top = top;
		return this;
	}

	/**
	 * Get top
	 *
	 * @return top
	 */
	@javax.annotation.Nullable
	public Integer getTop() {
		return top;
	}

	public void setTop(@javax.annotation.Nullable Integer top) {
		this.top = top;
	}

	public Fundstelle topZusatz(@javax.annotation.Nullable String topZusatz) {
		this.topZusatz = topZusatz;
		return this;
	}

	/**
	 * Get topZusatz
	 *
	 * @return topZusatz
	 */
	@javax.annotation.Nullable
	public String getTopZusatz() {
		return topZusatz;
	}

	public void setTopZusatz(@javax.annotation.Nullable String topZusatz) {
		this.topZusatz = topZusatz;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Fundstelle fundstelle = (Fundstelle) o;
		return Objects.equals(this.id, fundstelle.id) &&
				Objects.equals(this.dokumentart, fundstelle.dokumentart) &&
				Objects.equals(this.pdfUrl, fundstelle.pdfUrl) &&
				Objects.equals(this.dokumentnummer, fundstelle.dokumentnummer) &&
				Objects.equals(this.datum, fundstelle.datum) &&
				Objects.equals(this.drucksachetyp, fundstelle.drucksachetyp) &&
				Objects.equals(this.herausgeber, fundstelle.herausgeber) &&
				Objects.equals(this.urheber, fundstelle.urheber) &&
				Objects.equals(this.verteildatum, fundstelle.verteildatum) &&
				Objects.equals(this.seite, fundstelle.seite) &&
				Objects.equals(this.anfangsseite, fundstelle.anfangsseite) &&
				Objects.equals(this.endseite, fundstelle.endseite) &&
				Objects.equals(this.anfangsquadrant, fundstelle.anfangsquadrant) &&
				Objects.equals(this.endquadrant, fundstelle.endquadrant) &&
				Objects.equals(this.frageNummer, fundstelle.frageNummer) &&
				Objects.equals(this.anlagen, fundstelle.anlagen) &&
				Objects.equals(this.top, fundstelle.top) &&
				Objects.equals(this.topZusatz, fundstelle.topZusatz);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, dokumentart, pdfUrl, dokumentnummer, datum, drucksachetyp, herausgeber, urheber,
				verteildatum, seite, anfangsseite, endseite, anfangsquadrant, endquadrant, frageNummer, anlagen, top,
				topZusatz);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Fundstelle {\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    dokumentart: ").append(toIndentedString(dokumentart)).append("\n");
		sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
		sb.append("    xmlUrl: ").append(toIndentedString(xmlUrl)).append("\n");
		sb.append("    dokumentnummer: ").append(toIndentedString(dokumentnummer)).append("\n");
		sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
		sb.append("    drucksachetyp: ").append(toIndentedString(drucksachetyp)).append("\n");
		sb.append("    herausgeber: ").append(toIndentedString(herausgeber)).append("\n");
		sb.append("    urheber: ").append(toIndentedString(urheber)).append("\n");
		sb.append("    verteildatum: ").append(toIndentedString(verteildatum)).append("\n");
		sb.append("    seite: ").append(toIndentedString(seite)).append("\n");
		sb.append("    anfangsseite: ").append(toIndentedString(anfangsseite)).append("\n");
		sb.append("    endseite: ").append(toIndentedString(endseite)).append("\n");
		sb.append("    anfangsquadrant: ").append(toIndentedString(anfangsquadrant)).append("\n");
		sb.append("    endquadrant: ").append(toIndentedString(endquadrant)).append("\n");
		sb.append("    frageNummer: ").append(toIndentedString(frageNummer)).append("\n");
		sb.append("    anlagen: ").append(toIndentedString(anlagen)).append("\n");
		sb.append("    top: ").append(toIndentedString(top)).append("\n");
		sb.append("    topZusatz: ").append(toIndentedString(topZusatz)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;
	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("id");
		openapiFields.add("dokumentart");
		openapiFields.add("pdf_url");
		openapiFields.add("xml_url");
		openapiFields.add("dokumentnummer");
		openapiFields.add("datum");
		openapiFields.add("drucksachetyp");
		openapiFields.add("herausgeber");
		openapiFields.add("urheber");
		openapiFields.add("verteildatum");
		openapiFields.add("seite");
		openapiFields.add("anfangsseite");
		openapiFields.add("endseite");
		openapiFields.add("anfangsquadrant");
		openapiFields.add("endquadrant");
		openapiFields.add("frage_nummer");
		openapiFields.add("anlagen");
		openapiFields.add("top");
		openapiFields.add("top_zusatz");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
		openapiRequiredFields.add("id");
		openapiRequiredFields.add("dokumentart");
		openapiRequiredFields.add("dokumentnummer");
		openapiRequiredFields.add("datum");
		openapiRequiredFields.add("herausgeber");
		openapiRequiredFields.add("urheber");
	}

	/**
	 * Validates the JSON Element and throws an exception if issues found
	 *
	 * @param jsonElement JSON Element
	 * @throws IOException if the JSON Element is invalid with respect to Fundstelle
	 */
	public static void validateJsonElement(JsonElement jsonElement) throws IOException {
		if (jsonElement == null) {
			if (!Fundstelle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
				throw new IllegalArgumentException(
						String.format("The required field(s) %s in Fundstelle is not found in the empty JSON string",
								Fundstelle.openapiRequiredFields.toString()));
			}
		}

		Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
		// check to see if the JSON string contains additional fields
		for (Map.Entry<String, JsonElement> entry : entries) {
			if (!Fundstelle.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(
						String.format("The field `%s` in the JSON string is not defined in the `Fundstelle` properties. JSON: %s",
								entry.getKey(), jsonElement.toString()));
			}
		}

		// check to make sure all required properties/fields are present in the JSON
		// string
		for (String requiredField : Fundstelle.openapiRequiredFields) {
			if (jsonElement.getAsJsonObject().get(requiredField) == null) {
				throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s",
						requiredField, jsonElement.toString()));
			}
		}
		JsonObject jsonObj = jsonElement.getAsJsonObject();
		if (!jsonObj.get("id").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("id").toString()));
		}
		if (!jsonObj.get("dokumentart").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `dokumentart` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("dokumentart").toString()));
		}
		// validate the required field `dokumentart`
		DokumentartEnum.validateJsonElement(jsonObj.get("dokumentart"));
		if ((jsonObj.get("pdf_url") != null && !jsonObj.get("pdf_url").isJsonNull())
				&& !jsonObj.get("pdf_url").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `pdf_url` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("pdf_url").toString()));
		}
		if (!jsonObj.get("dokumentnummer").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `dokumentnummer` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("dokumentnummer").toString()));
		}
		if ((jsonObj.get("drucksachetyp") != null && !jsonObj.get("drucksachetyp").isJsonNull())
				&& !jsonObj.get("drucksachetyp").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `drucksachetyp` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("drucksachetyp").toString()));
		}
		// validate the required field `herausgeber`
		Zuordnung.validateJsonElement(jsonObj.get("herausgeber"));
		// ensure the required json array is present
		if (jsonObj.get("urheber") == null) {
			throw new IllegalArgumentException(
					"Expected the field `linkedContent` to be an array in the JSON string but got `null`");
		} else if (!jsonObj.get("urheber").isJsonArray()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `urheber` to be an array in the JSON string but got `%s`",
							jsonObj.get("urheber").toString()));
		}
		if ((jsonObj.get("seite") != null && !jsonObj.get("seite").isJsonNull())
				&& !jsonObj.get("seite").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `seite` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("seite").toString()));
		}
		// validate the optional field `anfangsquadrant`
		if (jsonObj.get("anfangsquadrant") != null && !jsonObj.get("anfangsquadrant").isJsonNull()) {
			Quadrant.validateJsonElement(jsonObj.get("anfangsquadrant"));
		}
		// validate the optional field `endquadrant`
		if (jsonObj.get("endquadrant") != null && !jsonObj.get("endquadrant").isJsonNull()) {
			Quadrant.validateJsonElement(jsonObj.get("endquadrant"));
		}
		if ((jsonObj.get("frage_nummer") != null && !jsonObj.get("frage_nummer").isJsonNull())
				&& !jsonObj.get("frage_nummer").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `frage_nummer` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("frage_nummer").toString()));
		}
		if ((jsonObj.get("anlagen") != null && !jsonObj.get("anlagen").isJsonNull())
				&& !jsonObj.get("anlagen").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `anlagen` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("anlagen").toString()));
		}
		if ((jsonObj.get("top_zusatz") != null && !jsonObj.get("top_zusatz").isJsonNull())
				&& !jsonObj.get("top_zusatz").isJsonPrimitive()) {
			throw new IllegalArgumentException(
					String.format("Expected the field `top_zusatz` to be a primitive type in the JSON string but got `%s`",
							jsonObj.get("top_zusatz").toString()));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!Fundstelle.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'Fundstelle' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<Fundstelle> thisAdapter = gson.getDelegateAdapter(this, TypeToken.get(Fundstelle.class));

			return (TypeAdapter<T>) new TypeAdapter<Fundstelle>() {
				@Override
				public void write(JsonWriter out, Fundstelle value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public Fundstelle read(JsonReader in) throws IOException {
					JsonElement jsonElement = elementAdapter.read(in);
					validateJsonElement(jsonElement);
					return thisAdapter.fromJsonTree(jsonElement);
				}

			}.nullSafe();
		}
	}

	/**
	 * Create an instance of Fundstelle given an JSON string
	 *
	 * @param jsonString JSON string
	 * @return An instance of Fundstelle
	 * @throws IOException if the JSON string is invalid with respect to Fundstelle
	 */
	public static Fundstelle fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, Fundstelle.class);
	}

	/**
	 * Convert an instance of Fundstelle to an JSON string
	 *
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}
}
