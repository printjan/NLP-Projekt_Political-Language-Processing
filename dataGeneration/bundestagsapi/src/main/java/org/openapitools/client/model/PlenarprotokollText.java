/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems f√ºr Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Fundstelle;
import org.openapitools.client.model.Vorgangsbezug;
import org.openapitools.client.model.Zuordnung;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlenarprotokollText
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class PlenarprotokollText {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  /**
   * Gets or Sets dokumentart
   */
  @JsonAdapter(DokumentartEnum.Adapter.class)
  public enum DokumentartEnum {
    PLENARPROTOKOLL("Plenarprotokoll");

    private String value;

    DokumentartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DokumentartEnum fromValue(String value) {
      for (DokumentartEnum b : DokumentartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DokumentartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DokumentartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DokumentartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DokumentartEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DokumentartEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOKUMENTART = "dokumentart";
  @SerializedName(SERIALIZED_NAME_DOKUMENTART)
  @javax.annotation.Nonnull
  private DokumentartEnum dokumentart;

  /**
   * Gets or Sets typ
   */
  @JsonAdapter(TypEnum.Adapter.class)
  public enum TypEnum {
    DOKUMENT("Dokument");

    private String value;

    TypEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypEnum fromValue(String value) {
      for (TypEnum b : TypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYP = "typ";
  @SerializedName(SERIALIZED_NAME_TYP)
  @javax.annotation.Nonnull
  private TypEnum typ;

  public static final String SERIALIZED_NAME_DOKUMENTNUMMER = "dokumentnummer";
  @SerializedName(SERIALIZED_NAME_DOKUMENTNUMMER)
  @javax.annotation.Nonnull
  private String dokumentnummer;

  public static final String SERIALIZED_NAME_WAHLPERIODE = "wahlperiode";
  @SerializedName(SERIALIZED_NAME_WAHLPERIODE)
  @javax.annotation.Nullable
  private Integer wahlperiode;

  public static final String SERIALIZED_NAME_HERAUSGEBER = "herausgeber";
  @SerializedName(SERIALIZED_NAME_HERAUSGEBER)
  @javax.annotation.Nonnull
  private Zuordnung herausgeber;

  public static final String SERIALIZED_NAME_DATUM = "datum";
  @SerializedName(SERIALIZED_NAME_DATUM)
  @javax.annotation.Nonnull
  private LocalDate datum;

  public static final String SERIALIZED_NAME_AKTUALISIERT = "aktualisiert";
  @SerializedName(SERIALIZED_NAME_AKTUALISIERT)
  @javax.annotation.Nonnull
  private OffsetDateTime aktualisiert;

  public static final String SERIALIZED_NAME_TITEL = "titel";
  @SerializedName(SERIALIZED_NAME_TITEL)
  @javax.annotation.Nonnull
  private String titel;

  public static final String SERIALIZED_NAME_FUNDSTELLE = "fundstelle";
  @SerializedName(SERIALIZED_NAME_FUNDSTELLE)
  @javax.annotation.Nonnull
  private Fundstelle fundstelle;

  public static final String SERIALIZED_NAME_PDF_HASH = "pdf_hash";
  @SerializedName(SERIALIZED_NAME_PDF_HASH)
  @javax.annotation.Nullable
  private String pdfHash;

  public static final String SERIALIZED_NAME_VORGANGSBEZUG = "vorgangsbezug";
  @SerializedName(SERIALIZED_NAME_VORGANGSBEZUG)
  @javax.annotation.Nullable
  private List<Vorgangsbezug> vorgangsbezug = new ArrayList<>();

  public static final String SERIALIZED_NAME_VORGANGSBEZUG_ANZAHL = "vorgangsbezug_anzahl";
  @SerializedName(SERIALIZED_NAME_VORGANGSBEZUG_ANZAHL)
  @javax.annotation.Nonnull
  private Integer vorgangsbezugAnzahl;

  public static final String SERIALIZED_NAME_SITZUNGSBEMERKUNG = "sitzungsbemerkung";
  @SerializedName(SERIALIZED_NAME_SITZUNGSBEMERKUNG)
  @javax.annotation.Nullable
  private String sitzungsbemerkung;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nullable
  private String text;

  public PlenarprotokollText() {
  }

  public PlenarprotokollText id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PlenarprotokollText dokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
    return this;
  }

  /**
   * Get dokumentart
   * @return dokumentart
   */
  @javax.annotation.Nonnull
  public DokumentartEnum getDokumentart() {
    return dokumentart;
  }

  public void setDokumentart(@javax.annotation.Nonnull DokumentartEnum dokumentart) {
    this.dokumentart = dokumentart;
  }


  public PlenarprotokollText typ(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
    return this;
  }

  /**
   * Get typ
   * @return typ
   */
  @javax.annotation.Nonnull
  public TypEnum getTyp() {
    return typ;
  }

  public void setTyp(@javax.annotation.Nonnull TypEnum typ) {
    this.typ = typ;
  }


  public PlenarprotokollText dokumentnummer(@javax.annotation.Nonnull String dokumentnummer) {
    this.dokumentnummer = dokumentnummer;
    return this;
  }

  /**
   * Get dokumentnummer
   * @return dokumentnummer
   */
  @javax.annotation.Nonnull
  public String getDokumentnummer() {
    return dokumentnummer;
  }

  public void setDokumentnummer(@javax.annotation.Nonnull String dokumentnummer) {
    this.dokumentnummer = dokumentnummer;
  }


  public PlenarprotokollText wahlperiode(@javax.annotation.Nullable Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
    return this;
  }

  /**
   * Get wahlperiode
   * @return wahlperiode
   */
  @javax.annotation.Nullable
  public Integer getWahlperiode() {
    return wahlperiode;
  }

  public void setWahlperiode(@javax.annotation.Nullable Integer wahlperiode) {
    this.wahlperiode = wahlperiode;
  }


  public PlenarprotokollText herausgeber(@javax.annotation.Nonnull Zuordnung herausgeber) {
    this.herausgeber = herausgeber;
    return this;
  }

  /**
   * Get herausgeber
   * @return herausgeber
   */
  @javax.annotation.Nonnull
  public Zuordnung getHerausgeber() {
    return herausgeber;
  }

  public void setHerausgeber(@javax.annotation.Nonnull Zuordnung herausgeber) {
    this.herausgeber = herausgeber;
  }


  public PlenarprotokollText datum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
    return this;
  }

  /**
   * Get datum
   * @return datum
   */
  @javax.annotation.Nonnull
  public LocalDate getDatum() {
    return datum;
  }

  public void setDatum(@javax.annotation.Nonnull LocalDate datum) {
    this.datum = datum;
  }


  public PlenarprotokollText aktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
    return this;
  }

  /**
   * Letzte Aktualisierung der Entit√§t
   * @return aktualisiert
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAktualisiert() {
    return aktualisiert;
  }

  public void setAktualisiert(@javax.annotation.Nonnull OffsetDateTime aktualisiert) {
    this.aktualisiert = aktualisiert;
  }


  public PlenarprotokollText titel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
    return this;
  }

  /**
   * Get titel
   * @return titel
   */
  @javax.annotation.Nonnull
  public String getTitel() {
    return titel;
  }

  public void setTitel(@javax.annotation.Nonnull String titel) {
    this.titel = titel;
  }


  public PlenarprotokollText fundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
    return this;
  }

  /**
   * Get fundstelle
   * @return fundstelle
   */
  @javax.annotation.Nonnull
  public Fundstelle getFundstelle() {
    return fundstelle;
  }

  public void setFundstelle(@javax.annotation.Nonnull Fundstelle fundstelle) {
    this.fundstelle = fundstelle;
  }


  public PlenarprotokollText pdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
    return this;
  }

  /**
   * MD5-Pr√ºfsumme der PDF-Datei
   * @return pdfHash
   */
  @javax.annotation.Nullable
  public String getPdfHash() {
    return pdfHash;
  }

  public void setPdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
  }


  public PlenarprotokollText vorgangsbezug(@javax.annotation.Nullable List<Vorgangsbezug> vorgangsbezug) {
    this.vorgangsbezug = vorgangsbezug;
    return this;
  }

  public PlenarprotokollText addVorgangsbezugItem(Vorgangsbezug vorgangsbezugItem) {
    if (this.vorgangsbezug == null) {
      this.vorgangsbezug = new ArrayList<>();
    }
    this.vorgangsbezug.add(vorgangsbezugItem);
    return this;
  }

  /**
   * Zusammenfassung der ersten 4 zugeh√∂rigen Vorg√§nge
   * @return vorgangsbezug
   */
  @javax.annotation.Nullable
  public List<Vorgangsbezug> getVorgangsbezug() {
    return vorgangsbezug;
  }

  public void setVorgangsbezug(@javax.annotation.Nullable List<Vorgangsbezug> vorgangsbezug) {
    this.vorgangsbezug = vorgangsbezug;
  }


  public PlenarprotokollText vorgangsbezugAnzahl(@javax.annotation.Nonnull Integer vorgangsbezugAnzahl) {
    this.vorgangsbezugAnzahl = vorgangsbezugAnzahl;
    return this;
  }

  /**
   * Gesamtzahl der zugeh√∂rigen Vorg√§nge
   * @return vorgangsbezugAnzahl
   */
  @javax.annotation.Nonnull
  public Integer getVorgangsbezugAnzahl() {
    return vorgangsbezugAnzahl;
  }

  public void setVorgangsbezugAnzahl(@javax.annotation.Nonnull Integer vorgangsbezugAnzahl) {
    this.vorgangsbezugAnzahl = vorgangsbezugAnzahl;
  }


  public PlenarprotokollText sitzungsbemerkung(@javax.annotation.Nullable String sitzungsbemerkung) {
    this.sitzungsbemerkung = sitzungsbemerkung;
    return this;
  }

  /**
   * Get sitzungsbemerkung
   * @return sitzungsbemerkung
   */
  @javax.annotation.Nullable
  public String getSitzungsbemerkung() {
    return sitzungsbemerkung;
  }

  public void setSitzungsbemerkung(@javax.annotation.Nullable String sitzungsbemerkung) {
    this.sitzungsbemerkung = sitzungsbemerkung;
  }


  public PlenarprotokollText text(@javax.annotation.Nullable String text) {
    this.text = text;
    return this;
  }

  /**
   * Volltext des Dokuments  Das Beispiel enth√§lt einen gek√ºrzten Auszug einer Drucksache. 
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nullable String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlenarprotokollText plenarprotokollText = (PlenarprotokollText) o;
    return Objects.equals(this.id, plenarprotokollText.id) &&
        Objects.equals(this.dokumentart, plenarprotokollText.dokumentart) &&
        Objects.equals(this.typ, plenarprotokollText.typ) &&
        Objects.equals(this.dokumentnummer, plenarprotokollText.dokumentnummer) &&
        Objects.equals(this.wahlperiode, plenarprotokollText.wahlperiode) &&
        Objects.equals(this.herausgeber, plenarprotokollText.herausgeber) &&
        Objects.equals(this.datum, plenarprotokollText.datum) &&
        Objects.equals(this.aktualisiert, plenarprotokollText.aktualisiert) &&
        Objects.equals(this.titel, plenarprotokollText.titel) &&
        Objects.equals(this.fundstelle, plenarprotokollText.fundstelle) &&
        Objects.equals(this.pdfHash, plenarprotokollText.pdfHash) &&
        Objects.equals(this.vorgangsbezug, plenarprotokollText.vorgangsbezug) &&
        Objects.equals(this.vorgangsbezugAnzahl, plenarprotokollText.vorgangsbezugAnzahl) &&
        Objects.equals(this.sitzungsbemerkung, plenarprotokollText.sitzungsbemerkung) &&
        Objects.equals(this.text, plenarprotokollText.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dokumentart, typ, dokumentnummer, wahlperiode, herausgeber, datum, aktualisiert, titel, fundstelle, pdfHash, vorgangsbezug, vorgangsbezugAnzahl, sitzungsbemerkung, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlenarprotokollText {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dokumentart: ").append(toIndentedString(dokumentart)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    dokumentnummer: ").append(toIndentedString(dokumentnummer)).append("\n");
    sb.append("    wahlperiode: ").append(toIndentedString(wahlperiode)).append("\n");
    sb.append("    herausgeber: ").append(toIndentedString(herausgeber)).append("\n");
    sb.append("    datum: ").append(toIndentedString(datum)).append("\n");
    sb.append("    aktualisiert: ").append(toIndentedString(aktualisiert)).append("\n");
    sb.append("    titel: ").append(toIndentedString(titel)).append("\n");
    sb.append("    fundstelle: ").append(toIndentedString(fundstelle)).append("\n");
    sb.append("    pdfHash: ").append(toIndentedString(pdfHash)).append("\n");
    sb.append("    vorgangsbezug: ").append(toIndentedString(vorgangsbezug)).append("\n");
    sb.append("    vorgangsbezugAnzahl: ").append(toIndentedString(vorgangsbezugAnzahl)).append("\n");
    sb.append("    sitzungsbemerkung: ").append(toIndentedString(sitzungsbemerkung)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("dokumentart");
    openapiFields.add("typ");
    openapiFields.add("dokumentnummer");
    openapiFields.add("wahlperiode");
    openapiFields.add("herausgeber");
    openapiFields.add("datum");
    openapiFields.add("aktualisiert");
    openapiFields.add("titel");
    openapiFields.add("fundstelle");
    openapiFields.add("pdf_hash");
    openapiFields.add("vorgangsbezug");
    openapiFields.add("vorgangsbezug_anzahl");
    openapiFields.add("sitzungsbemerkung");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("dokumentart");
    openapiRequiredFields.add("typ");
    openapiRequiredFields.add("dokumentnummer");
    openapiRequiredFields.add("herausgeber");
    openapiRequiredFields.add("datum");
    openapiRequiredFields.add("aktualisiert");
    openapiRequiredFields.add("titel");
    openapiRequiredFields.add("fundstelle");
    openapiRequiredFields.add("vorgangsbezug_anzahl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlenarprotokollText
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlenarprotokollText.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlenarprotokollText is not found in the empty JSON string", PlenarprotokollText.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlenarprotokollText.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlenarprotokollText` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlenarprotokollText.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("dokumentart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentart").toString()));
      }
      // validate the required field `dokumentart`
      DokumentartEnum.validateJsonElement(jsonObj.get("dokumentart"));
      if (!jsonObj.get("typ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typ").toString()));
      }
      // validate the required field `typ`
      TypEnum.validateJsonElement(jsonObj.get("typ"));
      if (!jsonObj.get("dokumentnummer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dokumentnummer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dokumentnummer").toString()));
      }
      // validate the required field `herausgeber`
      Zuordnung.validateJsonElement(jsonObj.get("herausgeber"));
      if (!jsonObj.get("titel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titel").toString()));
      }
      // validate the required field `fundstelle`
      Fundstelle.validateJsonElement(jsonObj.get("fundstelle"));
      if ((jsonObj.get("pdf_hash") != null && !jsonObj.get("pdf_hash").isJsonNull()) && !jsonObj.get("pdf_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdf_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdf_hash").toString()));
      }
      if (jsonObj.get("vorgangsbezug") != null && !jsonObj.get("vorgangsbezug").isJsonNull()) {
        JsonArray jsonArrayvorgangsbezug = jsonObj.getAsJsonArray("vorgangsbezug");
        if (jsonArrayvorgangsbezug != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vorgangsbezug").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vorgangsbezug` to be an array in the JSON string but got `%s`", jsonObj.get("vorgangsbezug").toString()));
          }

          // validate the optional field `vorgangsbezug` (array)
          for (int i = 0; i < jsonArrayvorgangsbezug.size(); i++) {
            Vorgangsbezug.validateJsonElement(jsonArrayvorgangsbezug.get(i));
          };
        }
      }
      if ((jsonObj.get("sitzungsbemerkung") != null && !jsonObj.get("sitzungsbemerkung").isJsonNull()) && !jsonObj.get("sitzungsbemerkung").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitzungsbemerkung` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sitzungsbemerkung").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlenarprotokollText.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlenarprotokollText' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlenarprotokollText> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlenarprotokollText.class));

       return (TypeAdapter<T>) new TypeAdapter<PlenarprotokollText>() {
           @Override
           public void write(JsonWriter out, PlenarprotokollText value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlenarprotokollText read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlenarprotokollText given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlenarprotokollText
   * @throws IOException if the JSON string is invalid with respect to PlenarprotokollText
   */
  public static PlenarprotokollText fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlenarprotokollText.class);
  }

  /**
   * Convert an instance of PlenarprotokollText to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

