/*
 * Deutscher Bundestag - DIP
 * API des Dokumentations- und Informationssystems f√ºr Parlamentsmaterialien
 *
 * The version of the OpenAPI document: 1.3
 * Contact: parlamentsdokumentation@bundestag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Plenarprotokoll;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlenarprotokollListResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T12:05:00.915435+02:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class PlenarprotokollListResponse {
  public static final String SERIALIZED_NAME_NUM_FOUND = "numFound";
  @SerializedName(SERIALIZED_NAME_NUM_FOUND)
  @javax.annotation.Nonnull
  private Integer numFound;

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  @javax.annotation.Nonnull
  private String cursor;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  @javax.annotation.Nonnull
  private List<Plenarprotokoll> documents = new ArrayList<>();

  public PlenarprotokollListResponse() {
  }

  public PlenarprotokollListResponse numFound(@javax.annotation.Nonnull Integer numFound) {
    this.numFound = numFound;
    return this;
  }

  /**
   * Get numFound
   * @return numFound
   */
  @javax.annotation.Nonnull
  public Integer getNumFound() {
    return numFound;
  }

  public void setNumFound(@javax.annotation.Nonnull Integer numFound) {
    this.numFound = numFound;
  }


  public PlenarprotokollListResponse cursor(@javax.annotation.Nonnull String cursor) {
    this.cursor = cursor;
    return this;
  }

  /**
   * Get cursor
   * @return cursor
   */
  @javax.annotation.Nonnull
  public String getCursor() {
    return cursor;
  }

  public void setCursor(@javax.annotation.Nonnull String cursor) {
    this.cursor = cursor;
  }


  public PlenarprotokollListResponse documents(@javax.annotation.Nonnull List<Plenarprotokoll> documents) {
    this.documents = documents;
    return this;
  }

  public PlenarprotokollListResponse addDocumentsItem(Plenarprotokoll documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nonnull
  public List<Plenarprotokoll> getDocuments() {
    return documents;
  }

  public void setDocuments(@javax.annotation.Nonnull List<Plenarprotokoll> documents) {
    this.documents = documents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlenarprotokollListResponse plenarprotokollListResponse = (PlenarprotokollListResponse) o;
    return Objects.equals(this.numFound, plenarprotokollListResponse.numFound) &&
        Objects.equals(this.cursor, plenarprotokollListResponse.cursor) &&
        Objects.equals(this.documents, plenarprotokollListResponse.documents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numFound, cursor, documents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlenarprotokollListResponse {\n");
    sb.append("    numFound: ").append(toIndentedString(numFound)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numFound");
    openapiFields.add("cursor");
    openapiFields.add("documents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("numFound");
    openapiRequiredFields.add("cursor");
    openapiRequiredFields.add("documents");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlenarprotokollListResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlenarprotokollListResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlenarprotokollListResponse is not found in the empty JSON string", PlenarprotokollListResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlenarprotokollListResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlenarprotokollListResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlenarprotokollListResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("documents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
      }

      JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
      // validate the required field `documents` (array)
      for (int i = 0; i < jsonArraydocuments.size(); i++) {
        Plenarprotokoll.validateJsonElement(jsonArraydocuments.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlenarprotokollListResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlenarprotokollListResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlenarprotokollListResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlenarprotokollListResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PlenarprotokollListResponse>() {
           @Override
           public void write(JsonWriter out, PlenarprotokollListResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlenarprotokollListResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlenarprotokollListResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlenarprotokollListResponse
   * @throws IOException if the JSON string is invalid with respect to PlenarprotokollListResponse
   */
  public static PlenarprotokollListResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlenarprotokollListResponse.class);
  }

  /**
   * Convert an instance of PlenarprotokollListResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

